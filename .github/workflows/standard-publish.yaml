name: Standard Publish

on: [push]

# All steps on the job depend on their previous steps finishing successfully
jobs:

  publish:
    runs-on: ubuntu-latest

    # don't start if [skip-publish or [skip publish] is found in commit msg
    if: contains(github.event.head_commit.message, '[skip-publish]') != true && contains(github.event.head_commit.message, '[skip publish]') != true

    steps:
      # Checkout repo
      - name: Checkout Repo
        id: checkout
        uses: actions/checkout@v3
        with:
          # fetch all history for changelog to be generated correctly
          fetch-depth: 0

      # Install node
      - name: Install NodeJS v16
        id: node
        if: steps.checkout.outcome == 'success'
        uses: actions/setup-node@v3
        with:
          node-version: 16
          cache: 'npm'

      # Install deps
      - name: Install Dependencies
        id: install
        if: steps.node.outcome == 'success'
        run: npm install --ignore-scripts

      # Build the package
      - name: Build
        id: build
        if: steps.install.outcome == 'success'
        run: npm run build

      # Lint the source code
      - name: Lint
        id: lint
        if: steps.build.outcome == 'success'
        run: npm run lint

      # Run the tests
      - name: Test
        id: test
        if: steps.lint.outcome == 'success'
        run: npm test

      # Test doc generation
      - name: Test Docs Generation
        id: docs
        if: steps.test.outcome == 'success'
        run: npm run docgen

      # Configure Git
      - name: Git Config
        id: git
        if: steps.docs.outcome == 'success'
        run: |
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --global user.name "GitHub Actions"

      # Major Release
      - name: Bump Major Version
        id: major
        # check for [major] in commit msg
        if: steps.git.outcome == 'success' && endsWith(github.event.head_commit.message, '[major]')
        # bum the version without creating tag and store the version in env
        run: echo "NEW_VERSION=$(npm version major --no-git-tag-version)" >> $GITHUB_ENV

      # Minor Release
      - name: Bump Minor Version
        id: minor
        # check for [minor] in commit msg
        if: steps.git.outcome == 'success' && endsWith(github.event.head_commit.message, '[minor]')
        # bum the version without creating tag and store the version in env
        run: echo "NEW_VERSION=$(npm version minor --no-git-tag-version)" >> $GITHUB_ENV

      # Patch Release
      - name: Bump Patch Version
        id: patch
        # check for lack of [major] and [minor] in commit msg
        if: steps.git.outcome == 'success' && ! endsWith(github.event.head_commit.message, '[major]') && ! endsWith(github.event.head_commit.message, '[minor]')
        # bum the version without creating tag and store the version in env
        run: echo "NEW_VERSION=$(npm version patch --no-git-tag-version)" >> $GITHUB_ENV

      # Update Changelog
      - name: Update Changelog
        id: changelog
        if: steps.major.outcome == 'success' || steps.minor.outcome == 'success' || steps.patch.outcome == 'success'
        # run the changelog script to update changelog and generate and write the release note to release-note.txt
        run: |
          npm run changelog -- -v ${{ env.NEW_VERSION }}
          body=$(npm run changelog --silent --  --stdout --unreleased-only -v ${{ env.NEW_VERSION }}) 
          header="### Notable changes of this release:"
          echo "$header${body:111}" >> ./release-note.txt

      # Commit changes and tag
      - name: Commit And Tag
        id: commit
        if: steps.changelog.outcome == 'success'
        run: |
          git add "package.json"
          git add "package-lock.json"
          git add "CHANGELOG.md"
          git commit -m "CI: Release ${{ env.NEW_VERSION }}"
          git tag ${{ env.NEW_VERSION }}

      # # Publish package to npm
      # - name: Publish To NPM
      #   id: publish
      #   if: steps.commit.outcome == 'success'
      #   uses: JS-DevTools/npm-publish@v1
      #   with:
      #     token: ${{ secrets.NPM_TOKEN }}
      #     access: public

      # Push repository changes
      - name: Push Changes To Remote
        id: push
        if: steps.publish.outcome == 'success'
        run: | 
          git push origin 
          git push -u origin ${{ env.NEW_VERSION }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # # Create zip and tar built package
      # - name: Create Built Package
      #   id: package
      #   if: steps.push.outcome == 'success'
      #   run: | 
      #     zip -r rainlang-${{ env.NEW_VERSION }}.zip dist docs src cjs.js esm.js cjs.d.ts esm.d.ts README.md CHANGELOG.md package.json
      #     tar -czvf rainlang-${{ env.NEW_VERSION }}.tar.gz dist docs src cjs.js esm.js cjs.d.ts esm.d.ts README.md CHANGELOG.md package.json

      # # Create gitHub release with built packages
      # - name: GitHub Release
      #   if: steps.package.outcome == 'success'
      #   uses: softprops/action-gh-release@v1
      #   with:
      #     tag_name: ${{ env.NEW_VERSION }}
      #     name: Release ${{ env.NEW_VERSION }}
      #     body_path: ${{ github.workspace }}/release-note.txt
      #     files: |
      #       rainlang-${{ env.NEW_VERSION }}.zip
      #       rainlang-${{ env.NEW_VERSION }}.tar.gz
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}