{
  "metadata": {
    "toolPackage": "@microsoft/api-extractor",
    "toolVersion": "7.38.0",
    "schemaVersion": 1011,
    "oldestForwardsCompatibleVersion": 1001,
    "tsdocConfig": {
      "$schema": "https://developer.microsoft.com/json-schemas/tsdoc/v0/tsdoc.schema.json",
      "noStandardTags": true,
      "tagDefinitions": [
        {
          "tagName": "@alpha",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@beta",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@defaultValue",
          "syntaxKind": "block"
        },
        {
          "tagName": "@decorator",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@deprecated",
          "syntaxKind": "block"
        },
        {
          "tagName": "@eventProperty",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@example",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@experimental",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@inheritDoc",
          "syntaxKind": "inline"
        },
        {
          "tagName": "@internal",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@label",
          "syntaxKind": "inline"
        },
        {
          "tagName": "@link",
          "syntaxKind": "inline",
          "allowMultiple": true
        },
        {
          "tagName": "@override",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@packageDocumentation",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@param",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@privateRemarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@public",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@readonly",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@remarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@returns",
          "syntaxKind": "block"
        },
        {
          "tagName": "@sealed",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@see",
          "syntaxKind": "block"
        },
        {
          "tagName": "@throws",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@typeParam",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@virtual",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@betaDocumentation",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@internalRemarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@preapproved",
          "syntaxKind": "modifier"
        }
      ],
      "supportForTags": {
        "@alpha": true,
        "@beta": true,
        "@defaultValue": true,
        "@decorator": true,
        "@deprecated": true,
        "@eventProperty": true,
        "@example": true,
        "@experimental": true,
        "@inheritDoc": true,
        "@internal": true,
        "@label": true,
        "@link": true,
        "@override": true,
        "@packageDocumentation": true,
        "@param": true,
        "@privateRemarks": true,
        "@public": true,
        "@readonly": true,
        "@remarks": true,
        "@returns": true,
        "@sealed": true,
        "@see": true,
        "@throws": true,
        "@typeParam": true,
        "@virtual": true,
        "@betaDocumentation": true,
        "@internalRemarks": true,
        "@preapproved": true
      },
      "reportUnsupportedHtmlElements": false
    }
  },
  "kind": "Package",
  "canonicalReference": "@rainprotocol/rainlang!",
  "docComment": "",
  "name": "@rainprotocol/rainlang",
  "preserveMemberOrder": false,
  "members": [
    {
      "kind": "EntryPoint",
      "canonicalReference": "@rainprotocol/rainlang!",
      "name": "",
      "preserveMemberOrder": false,
      "members": [
        {
          "kind": "Variable",
          "canonicalReference": "@rainprotocol/rainlang!areEqualStateConfigs:var",
          "docComment": "/**\n * Checks 2 ExpressionConfig objects to see if they are equal or not\n *\n * @param config1 - first ExpressionConfig\n *\n * @param config2 - second ExpressionConfig\n *\n * @returns boolean\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "areEqualStateConfigs: "
            },
            {
              "kind": "Content",
              "text": "(config1: "
            },
            {
              "kind": "Reference",
              "text": "ExpressionConfig",
              "canonicalReference": "@rainprotocol/rainlang!ExpressionConfig:type"
            },
            {
              "kind": "Content",
              "text": ", config2: "
            },
            {
              "kind": "Reference",
              "text": "ExpressionConfig",
              "canonicalReference": "@rainprotocol/rainlang!ExpressionConfig:type"
            },
            {
              "kind": "Content",
              "text": ") => boolean"
            }
          ],
          "fileUrlPath": "dist/types/utils.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "areEqualStateConfigs",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 6
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@rainprotocol/rainlang!arrayify:var",
          "docComment": "/**\n * ethers arrayify\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "arrayify: "
            },
            {
              "kind": "Content",
              "text": "typeof "
            },
            {
              "kind": "Reference",
              "text": "utils.arrayify",
              "canonicalReference": "@ethersproject/bytes!arrayify:function"
            }
          ],
          "fileUrlPath": "dist/types/utils.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "arrayify",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          }
        },
        {
          "kind": "Namespace",
          "canonicalReference": "@rainprotocol/rainlang!AST:namespace",
          "docComment": "/**\n * This namespace provides all types and functionalities for RainDocument and Rainlang AST\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare namespace AST "
            }
          ],
          "fileUrlPath": "dist/types/languageTypes.d.ts",
          "releaseTag": "Public",
          "name": "AST",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Interface",
              "canonicalReference": "@rainprotocol/rainlang!AST.Alias:interface",
              "docComment": "/**\n * Type for Rainlang/RainDocument alias\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "interface Alias "
                }
              ],
              "releaseTag": "Public",
              "name": "Alias",
              "preserveMemberOrder": false,
              "members": [
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@rainprotocol/rainlang!AST.Alias#lhsAlias:member",
                  "docComment": "",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "lhsAlias?: "
                    },
                    {
                      "kind": "Reference",
                      "text": "Alias",
                      "canonicalReference": "@rainprotocol/rainlang!AST.Alias:interface"
                    },
                    {
                      "kind": "Content",
                      "text": "[]"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": false,
                  "isOptional": true,
                  "releaseTag": "Public",
                  "name": "lhsAlias",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@rainprotocol/rainlang!AST.Alias#name:member",
                  "docComment": "",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "name: "
                    },
                    {
                      "kind": "Content",
                      "text": "string"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": false,
                  "isOptional": false,
                  "releaseTag": "Public",
                  "name": "name",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@rainprotocol/rainlang!AST.Alias#position:member",
                  "docComment": "",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "position: "
                    },
                    {
                      "kind": "Reference",
                      "text": "Offsets",
                      "canonicalReference": "@rainprotocol/rainlang!AST.Offsets:type"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": false,
                  "isOptional": false,
                  "releaseTag": "Public",
                  "name": "position",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "extendsTokenRanges": []
            },
            {
              "kind": "Namespace",
              "canonicalReference": "@rainprotocol/rainlang!AST.Alias:namespace",
              "docComment": "/**\n * The namespace provides functionality to type check\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "namespace Alias "
                }
              ],
              "releaseTag": "Public",
              "name": "Alias",
              "preserveMemberOrder": false,
              "members": [
                {
                  "kind": "Function",
                  "canonicalReference": "@rainprotocol/rainlang!AST.Alias.is:function(1)",
                  "docComment": "/**\n * Checks if a value is a valid Alias\n *\n * @param value - The value to check\n *\n * @public\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "function is(value: "
                    },
                    {
                      "kind": "Content",
                      "text": "any"
                    },
                    {
                      "kind": "Content",
                      "text": "): "
                    },
                    {
                      "kind": "Reference",
                      "text": "value",
                      "canonicalReference": "@rainprotocol/rainlang!~value"
                    },
                    {
                      "kind": "Content",
                      "text": " is "
                    },
                    {
                      "kind": "Reference",
                      "text": "Alias",
                      "canonicalReference": "@rainprotocol/rainlang!AST.Alias:interface"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "returnTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 6
                  },
                  "releaseTag": "Public",
                  "overloadIndex": 1,
                  "parameters": [
                    {
                      "parameterName": "value",
                      "parameterTypeTokenRange": {
                        "startIndex": 1,
                        "endIndex": 2
                      },
                      "isOptional": false
                    }
                  ],
                  "name": "is"
                }
              ]
            },
            {
              "kind": "Namespace",
              "canonicalReference": "@rainprotocol/rainlang!AST.Binding:namespace",
              "docComment": "/**\n * The namespace provides functionality to type check\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "namespace Binding "
                }
              ],
              "releaseTag": "Public",
              "name": "Binding",
              "preserveMemberOrder": false,
              "members": [
                {
                  "kind": "Function",
                  "canonicalReference": "@rainprotocol/rainlang!AST.Binding.is:function(1)",
                  "docComment": "/**\n * Checks if a value is a valid NamedExpression\n *\n * @param value - The value to check\n *\n * @public\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "function is(value: "
                    },
                    {
                      "kind": "Content",
                      "text": "any"
                    },
                    {
                      "kind": "Content",
                      "text": "): "
                    },
                    {
                      "kind": "Reference",
                      "text": "value",
                      "canonicalReference": "@rainprotocol/rainlang!~value"
                    },
                    {
                      "kind": "Content",
                      "text": " is "
                    },
                    {
                      "kind": "Reference",
                      "text": "Binding",
                      "canonicalReference": "@rainprotocol/rainlang!AST.Binding:type"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "returnTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 6
                  },
                  "releaseTag": "Public",
                  "overloadIndex": 1,
                  "parameters": [
                    {
                      "parameterName": "value",
                      "parameterTypeTokenRange": {
                        "startIndex": 1,
                        "endIndex": 2
                      },
                      "isOptional": false
                    }
                  ],
                  "name": "is"
                },
                {
                  "kind": "Function",
                  "canonicalReference": "@rainprotocol/rainlang!AST.Binding.isExpression:function(1)",
                  "docComment": "/**\n * Checks if a value is a valid NamedExpression Expression\n *\n * @param value - The value to check\n *\n * @public\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "function isExpression(value: "
                    },
                    {
                      "kind": "Content",
                      "text": "any"
                    },
                    {
                      "kind": "Content",
                      "text": "): "
                    },
                    {
                      "kind": "Content",
                      "text": "boolean"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "returnTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "releaseTag": "Public",
                  "overloadIndex": 1,
                  "parameters": [
                    {
                      "parameterName": "value",
                      "parameterTypeTokenRange": {
                        "startIndex": 1,
                        "endIndex": 2
                      },
                      "isOptional": false
                    }
                  ],
                  "name": "isExpression"
                }
              ]
            },
            {
              "kind": "TypeAlias",
              "canonicalReference": "@rainprotocol/rainlang!AST.Binding:type",
              "docComment": "/**\n * Type for a binding (named expressions)\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "type Binding = "
                },
                {
                  "kind": "Content",
                  "text": "{\n        name: string;\n        namePosition: "
                },
                {
                  "kind": "Reference",
                  "text": "Offsets",
                  "canonicalReference": "@rainprotocol/rainlang!AST.Offsets:type"
                },
                {
                  "kind": "Content",
                  "text": ";\n        content: string;\n        contentPosition: "
                },
                {
                  "kind": "Reference",
                  "text": "Offsets",
                  "canonicalReference": "@rainprotocol/rainlang!AST.Offsets:type"
                },
                {
                  "kind": "Content",
                  "text": ";\n        position: "
                },
                {
                  "kind": "Reference",
                  "text": "Offsets",
                  "canonicalReference": "@rainprotocol/rainlang!AST.Offsets:type"
                },
                {
                  "kind": "Content",
                  "text": ";\n        problems: "
                },
                {
                  "kind": "Reference",
                  "text": "Problem",
                  "canonicalReference": "@rainprotocol/rainlang!AST.Problem:interface"
                },
                {
                  "kind": "Content",
                  "text": "[];\n        dependencies: string[];\n        elided?: string;\n        constant?: string;\n        exp?: "
                },
                {
                  "kind": "Reference",
                  "text": "Rainlang",
                  "canonicalReference": "@rainprotocol/rainlang!Rainlang:class"
                },
                {
                  "kind": "Content",
                  "text": ";\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "Binding",
              "typeTokenRange": {
                "startIndex": 1,
                "endIndex": 12
              }
            },
            {
              "kind": "Interface",
              "canonicalReference": "@rainprotocol/rainlang!AST.Comment:interface",
              "docComment": "/**\n * Type for Rainlang/RainDocument comments\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "interface Comment "
                }
              ],
              "releaseTag": "Public",
              "name": "Comment",
              "preserveMemberOrder": false,
              "members": [
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@rainprotocol/rainlang!AST.Comment#comment:member",
                  "docComment": "",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "comment: "
                    },
                    {
                      "kind": "Content",
                      "text": "string"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": false,
                  "isOptional": false,
                  "releaseTag": "Public",
                  "name": "comment",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@rainprotocol/rainlang!AST.Comment#position:member",
                  "docComment": "",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "position: "
                    },
                    {
                      "kind": "Reference",
                      "text": "Offsets",
                      "canonicalReference": "@rainprotocol/rainlang!AST.Offsets:type"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": false,
                  "isOptional": false,
                  "releaseTag": "Public",
                  "name": "position",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "extendsTokenRanges": []
            },
            {
              "kind": "Namespace",
              "canonicalReference": "@rainprotocol/rainlang!AST.Comment:namespace",
              "docComment": "/**\n * The namespace provides functionality to type check\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "namespace Comment "
                }
              ],
              "releaseTag": "Public",
              "name": "Comment",
              "preserveMemberOrder": false,
              "members": [
                {
                  "kind": "Function",
                  "canonicalReference": "@rainprotocol/rainlang!AST.Comment.is:function(1)",
                  "docComment": "/**\n * Checks if a value is a valid CommentASTNode\n *\n * @param value - The value to check\n *\n * @public\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "function is(value: "
                    },
                    {
                      "kind": "Content",
                      "text": "any"
                    },
                    {
                      "kind": "Content",
                      "text": "): "
                    },
                    {
                      "kind": "Reference",
                      "text": "value",
                      "canonicalReference": "@rainprotocol/rainlang!~value"
                    },
                    {
                      "kind": "Content",
                      "text": " is "
                    },
                    {
                      "kind": "Reference",
                      "text": "Comment",
                      "canonicalReference": "@rainprotocol/rainlang!AST.Comment:interface"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "returnTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 6
                  },
                  "releaseTag": "Public",
                  "overloadIndex": 1,
                  "parameters": [
                    {
                      "parameterName": "value",
                      "parameterTypeTokenRange": {
                        "startIndex": 1,
                        "endIndex": 2
                      },
                      "isOptional": false
                    }
                  ],
                  "name": "is"
                }
              ]
            },
            {
              "kind": "Namespace",
              "canonicalReference": "@rainprotocol/rainlang!AST.ContextAlias:namespace",
              "docComment": "/**\n * The namespace provides functionality to type check\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "namespace ContextAlias "
                }
              ],
              "releaseTag": "Public",
              "name": "ContextAlias",
              "preserveMemberOrder": false,
              "members": [
                {
                  "kind": "Function",
                  "canonicalReference": "@rainprotocol/rainlang!AST.ContextAlias.is:function(1)",
                  "docComment": "/**\n * Checks if a value is a valid ContextAlias\n *\n * @param value - The value to check\n *\n * @public\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "function is(value: "
                    },
                    {
                      "kind": "Content",
                      "text": "any"
                    },
                    {
                      "kind": "Content",
                      "text": "): "
                    },
                    {
                      "kind": "Reference",
                      "text": "value",
                      "canonicalReference": "@rainprotocol/rainlang!~value"
                    },
                    {
                      "kind": "Content",
                      "text": " is "
                    },
                    {
                      "kind": "Reference",
                      "text": "Namespace",
                      "canonicalReference": "@rainprotocol/rainlang!AST.Namespace:type"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "returnTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 6
                  },
                  "releaseTag": "Public",
                  "overloadIndex": 1,
                  "parameters": [
                    {
                      "parameterName": "value",
                      "parameterTypeTokenRange": {
                        "startIndex": 1,
                        "endIndex": 2
                      },
                      "isOptional": false
                    }
                  ],
                  "name": "is"
                }
              ]
            },
            {
              "kind": "TypeAlias",
              "canonicalReference": "@rainprotocol/rainlang!AST.ContextAlias:type",
              "docComment": "/**\n * Type for context aliases from a contract caller meta\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "type ContextAlias = "
                },
                {
                  "kind": "Content",
                  "text": "{\n        name: string;\n        description: string;\n        column: number;\n        row: number;\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "ContextAlias",
              "typeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "Interface",
              "canonicalReference": "@rainprotocol/rainlang!AST.Import:interface",
              "docComment": "/**\n * Type of import statements specified in a RainDocument\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "interface Import "
                }
              ],
              "releaseTag": "Public",
              "name": "Import",
              "preserveMemberOrder": false,
              "members": [
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@rainprotocol/rainlang!AST.Import#hash:member",
                  "docComment": "",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "hash: "
                    },
                    {
                      "kind": "Content",
                      "text": "string"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": false,
                  "isOptional": false,
                  "releaseTag": "Public",
                  "name": "hash",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@rainprotocol/rainlang!AST.Import#hashPosition:member",
                  "docComment": "",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "hashPosition: "
                    },
                    {
                      "kind": "Reference",
                      "text": "Offsets",
                      "canonicalReference": "@rainprotocol/rainlang!AST.Offsets:type"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": false,
                  "isOptional": false,
                  "releaseTag": "Public",
                  "name": "hashPosition",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@rainprotocol/rainlang!AST.Import#name:member",
                  "docComment": "",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "name: "
                    },
                    {
                      "kind": "Content",
                      "text": "string"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": false,
                  "isOptional": false,
                  "releaseTag": "Public",
                  "name": "name",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@rainprotocol/rainlang!AST.Import#namePosition:member",
                  "docComment": "",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "namePosition: "
                    },
                    {
                      "kind": "Reference",
                      "text": "Offsets",
                      "canonicalReference": "@rainprotocol/rainlang!AST.Offsets:type"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": false,
                  "isOptional": false,
                  "releaseTag": "Public",
                  "name": "namePosition",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@rainprotocol/rainlang!AST.Import#position:member",
                  "docComment": "",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "position: "
                    },
                    {
                      "kind": "Reference",
                      "text": "Offsets",
                      "canonicalReference": "@rainprotocol/rainlang!AST.Offsets:type"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": false,
                  "isOptional": false,
                  "releaseTag": "Public",
                  "name": "position",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@rainprotocol/rainlang!AST.Import#problems:member",
                  "docComment": "",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "problems: "
                    },
                    {
                      "kind": "Reference",
                      "text": "Problem",
                      "canonicalReference": "@rainprotocol/rainlang!AST.Problem:interface"
                    },
                    {
                      "kind": "Content",
                      "text": "[]"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": false,
                  "isOptional": false,
                  "releaseTag": "Public",
                  "name": "problems",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@rainprotocol/rainlang!AST.Import#reconfigProblems:member",
                  "docComment": "",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "reconfigProblems?: "
                    },
                    {
                      "kind": "Reference",
                      "text": "Problem",
                      "canonicalReference": "@rainprotocol/rainlang!AST.Problem:interface"
                    },
                    {
                      "kind": "Content",
                      "text": "[]"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": false,
                  "isOptional": true,
                  "releaseTag": "Public",
                  "name": "reconfigProblems",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@rainprotocol/rainlang!AST.Import#reconfigs:member",
                  "docComment": "",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "reconfigs?: "
                    },
                    {
                      "kind": "Content",
                      "text": "["
                    },
                    {
                      "kind": "Reference",
                      "text": "ParsedChunk",
                      "canonicalReference": "@rainprotocol/rainlang!~ParsedChunk"
                    },
                    {
                      "kind": "Content",
                      "text": ", "
                    },
                    {
                      "kind": "Reference",
                      "text": "ParsedChunk",
                      "canonicalReference": "@rainprotocol/rainlang!~ParsedChunk"
                    },
                    {
                      "kind": "Content",
                      "text": "][]"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": false,
                  "isOptional": true,
                  "releaseTag": "Public",
                  "name": "reconfigs",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 6
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@rainprotocol/rainlang!AST.Import#sequence:member",
                  "docComment": "",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "sequence?: "
                    },
                    {
                      "kind": "Content",
                      "text": "{\n            dispair?: {\n                bytecode: string;\n                authoringMeta?: "
                    },
                    {
                      "kind": "Reference",
                      "text": "Meta.Authoring",
                      "canonicalReference": "@rainprotocol/meta!Meta.Authoring"
                    },
                    {
                      "kind": "Content",
                      "text": "[];\n            };\n            ctxmeta?: "
                    },
                    {
                      "kind": "Reference",
                      "text": "ContextAlias",
                      "canonicalReference": "@rainprotocol/rainlang!AST.ContextAlias:type"
                    },
                    {
                      "kind": "Content",
                      "text": "[];\n            dotrain?: "
                    },
                    {
                      "kind": "Reference",
                      "text": "RainDocument",
                      "canonicalReference": "@rainprotocol/rainlang!RainDocument:class"
                    },
                    {
                      "kind": "Content",
                      "text": ";\n        }"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": false,
                  "isOptional": true,
                  "releaseTag": "Public",
                  "name": "sequence",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 8
                  }
                }
              ],
              "extendsTokenRanges": []
            },
            {
              "kind": "Namespace",
              "canonicalReference": "@rainprotocol/rainlang!AST.Import:namespace",
              "docComment": "/**\n * The namespace provides functionality to type check\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "namespace Import "
                }
              ],
              "releaseTag": "Public",
              "name": "Import",
              "preserveMemberOrder": false,
              "members": [
                {
                  "kind": "Function",
                  "canonicalReference": "@rainprotocol/rainlang!AST.Import.is:function(1)",
                  "docComment": "/**\n * Checks if a value is a valid ImportASTNode\n *\n * @param value - The value to check\n *\n * @public\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "function is(value: "
                    },
                    {
                      "kind": "Content",
                      "text": "any"
                    },
                    {
                      "kind": "Content",
                      "text": "): "
                    },
                    {
                      "kind": "Reference",
                      "text": "value",
                      "canonicalReference": "@rainprotocol/rainlang!~value"
                    },
                    {
                      "kind": "Content",
                      "text": " is "
                    },
                    {
                      "kind": "Reference",
                      "text": "Import",
                      "canonicalReference": "@rainprotocol/rainlang!AST.Import:interface"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "returnTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 6
                  },
                  "releaseTag": "Public",
                  "overloadIndex": 1,
                  "parameters": [
                    {
                      "parameterName": "value",
                      "parameterTypeTokenRange": {
                        "startIndex": 1,
                        "endIndex": 2
                      },
                      "isOptional": false
                    }
                  ],
                  "name": "is"
                }
              ]
            },
            {
              "kind": "Namespace",
              "canonicalReference": "@rainprotocol/rainlang!AST.Namespace:namespace",
              "docComment": "/**\n * The namespace provides functionality to type check\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "namespace Namespace "
                }
              ],
              "releaseTag": "Public",
              "name": "Namespace",
              "preserveMemberOrder": false,
              "members": [
                {
                  "kind": "Function",
                  "canonicalReference": "@rainprotocol/rainlang!AST.Namespace.is:function(1)",
                  "docComment": "/**\n * Checks if a value is a valid Namespace\n *\n * @param value - The value to check\n *\n * @public\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "function is(value: "
                    },
                    {
                      "kind": "Content",
                      "text": "any"
                    },
                    {
                      "kind": "Content",
                      "text": "): "
                    },
                    {
                      "kind": "Reference",
                      "text": "value",
                      "canonicalReference": "@rainprotocol/rainlang!~value"
                    },
                    {
                      "kind": "Content",
                      "text": " is "
                    },
                    {
                      "kind": "Reference",
                      "text": "Namespace",
                      "canonicalReference": "@rainprotocol/rainlang!AST.Namespace:type"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "returnTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 6
                  },
                  "releaseTag": "Public",
                  "overloadIndex": 1,
                  "parameters": [
                    {
                      "parameterName": "value",
                      "parameterTypeTokenRange": {
                        "startIndex": 1,
                        "endIndex": 2
                      },
                      "isOptional": false
                    }
                  ],
                  "name": "is"
                },
                {
                  "kind": "Function",
                  "canonicalReference": "@rainprotocol/rainlang!AST.Namespace.isBinding:function(1)",
                  "docComment": "",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "function isBinding(value: "
                    },
                    {
                      "kind": "Content",
                      "text": "any"
                    },
                    {
                      "kind": "Content",
                      "text": "): "
                    },
                    {
                      "kind": "Reference",
                      "text": "value",
                      "canonicalReference": "@rainprotocol/rainlang!~value"
                    },
                    {
                      "kind": "Content",
                      "text": " is {\n            Hash: string;\n            ImportIndex: number;\n            Element: "
                    },
                    {
                      "kind": "Reference",
                      "text": "Binding",
                      "canonicalReference": "@rainprotocol/rainlang!AST.Binding:type"
                    },
                    {
                      "kind": "Content",
                      "text": ";\n        }"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "returnTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 7
                  },
                  "releaseTag": "Public",
                  "overloadIndex": 1,
                  "parameters": [
                    {
                      "parameterName": "value",
                      "parameterTypeTokenRange": {
                        "startIndex": 1,
                        "endIndex": 2
                      },
                      "isOptional": false
                    }
                  ],
                  "name": "isBinding"
                },
                {
                  "kind": "Function",
                  "canonicalReference": "@rainprotocol/rainlang!AST.Namespace.isContextAlias:function(1)",
                  "docComment": "",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "function isContextAlias(value: "
                    },
                    {
                      "kind": "Content",
                      "text": "any"
                    },
                    {
                      "kind": "Content",
                      "text": "): "
                    },
                    {
                      "kind": "Reference",
                      "text": "value",
                      "canonicalReference": "@rainprotocol/rainlang!~value"
                    },
                    {
                      "kind": "Content",
                      "text": " is {\n            Hash: string;\n            ImportIndex: number;\n            Element: "
                    },
                    {
                      "kind": "Reference",
                      "text": "ContextAlias",
                      "canonicalReference": "@rainprotocol/rainlang!AST.ContextAlias:type"
                    },
                    {
                      "kind": "Content",
                      "text": ";\n        }"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "returnTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 7
                  },
                  "releaseTag": "Public",
                  "overloadIndex": 1,
                  "parameters": [
                    {
                      "parameterName": "value",
                      "parameterTypeTokenRange": {
                        "startIndex": 1,
                        "endIndex": 2
                      },
                      "isOptional": false
                    }
                  ],
                  "name": "isContextAlias"
                },
                {
                  "kind": "Function",
                  "canonicalReference": "@rainprotocol/rainlang!AST.Namespace.isNamespace:function(1)",
                  "docComment": "",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "function isNamespace(value: "
                    },
                    {
                      "kind": "Content",
                      "text": "any"
                    },
                    {
                      "kind": "Content",
                      "text": "): "
                    },
                    {
                      "kind": "Reference",
                      "text": "value",
                      "canonicalReference": "@rainprotocol/rainlang!~value"
                    },
                    {
                      "kind": "Content",
                      "text": " is "
                    },
                    {
                      "kind": "Reference",
                      "text": "Namespace",
                      "canonicalReference": "@rainprotocol/rainlang!AST.Namespace:type"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "returnTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 6
                  },
                  "releaseTag": "Public",
                  "overloadIndex": 1,
                  "parameters": [
                    {
                      "parameterName": "value",
                      "parameterTypeTokenRange": {
                        "startIndex": 1,
                        "endIndex": 2
                      },
                      "isOptional": false
                    }
                  ],
                  "name": "isNamespace"
                },
                {
                  "kind": "Function",
                  "canonicalReference": "@rainprotocol/rainlang!AST.Namespace.isNode:function(1)",
                  "docComment": "",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "function isNode(value: "
                    },
                    {
                      "kind": "Content",
                      "text": "any"
                    },
                    {
                      "kind": "Content",
                      "text": "): "
                    },
                    {
                      "kind": "Reference",
                      "text": "value",
                      "canonicalReference": "@rainprotocol/rainlang!~value"
                    },
                    {
                      "kind": "Content",
                      "text": " is "
                    },
                    {
                      "kind": "Reference",
                      "text": "NamespaceNode",
                      "canonicalReference": "@rainprotocol/rainlang!AST.NamespaceNode:type"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "returnTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 6
                  },
                  "releaseTag": "Public",
                  "overloadIndex": 1,
                  "parameters": [
                    {
                      "parameterName": "value",
                      "parameterTypeTokenRange": {
                        "startIndex": 1,
                        "endIndex": 2
                      },
                      "isOptional": false
                    }
                  ],
                  "name": "isNode"
                },
                {
                  "kind": "Function",
                  "canonicalReference": "@rainprotocol/rainlang!AST.Namespace.isWord:function(1)",
                  "docComment": "",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "function isWord(value: "
                    },
                    {
                      "kind": "Content",
                      "text": "any"
                    },
                    {
                      "kind": "Content",
                      "text": "): "
                    },
                    {
                      "kind": "Reference",
                      "text": "value",
                      "canonicalReference": "@rainprotocol/rainlang!~value"
                    },
                    {
                      "kind": "Content",
                      "text": " is {\n            Hash: string;\n            ImportIndex: number;\n            Element: "
                    },
                    {
                      "kind": "Reference",
                      "text": "Meta.Authoring",
                      "canonicalReference": "@rainprotocol/meta!Meta.Authoring"
                    },
                    {
                      "kind": "Content",
                      "text": ";\n        }"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "returnTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 7
                  },
                  "releaseTag": "Public",
                  "overloadIndex": 1,
                  "parameters": [
                    {
                      "parameterName": "value",
                      "parameterTypeTokenRange": {
                        "startIndex": 1,
                        "endIndex": 2
                      },
                      "isOptional": false
                    }
                  ],
                  "name": "isWord"
                },
                {
                  "kind": "Function",
                  "canonicalReference": "@rainprotocol/rainlang!AST.Namespace.isWords:function(1)",
                  "docComment": "",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "function isWords(value: "
                    },
                    {
                      "kind": "Content",
                      "text": "any"
                    },
                    {
                      "kind": "Content",
                      "text": "): "
                    },
                    {
                      "kind": "Reference",
                      "text": "value",
                      "canonicalReference": "@rainprotocol/rainlang!~value"
                    },
                    {
                      "kind": "Content",
                      "text": " is {\n            Hash: string;\n            ImportIndex: number;\n            Element: "
                    },
                    {
                      "kind": "Reference",
                      "text": "Meta.Authoring",
                      "canonicalReference": "@rainprotocol/meta!Meta.Authoring"
                    },
                    {
                      "kind": "Content",
                      "text": "[];\n        }"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "returnTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 7
                  },
                  "releaseTag": "Public",
                  "overloadIndex": 1,
                  "parameters": [
                    {
                      "parameterName": "value",
                      "parameterTypeTokenRange": {
                        "startIndex": 1,
                        "endIndex": 2
                      },
                      "isOptional": false
                    }
                  ],
                  "name": "isWords"
                }
              ]
            },
            {
              "kind": "TypeAlias",
              "canonicalReference": "@rainprotocol/rainlang!AST.Namespace:type",
              "docComment": "/**\n * Type for a namespace in dotrain\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "type Namespace = "
                },
                {
                  "kind": "Content",
                  "text": "{\n        [key: string]: "
                },
                {
                  "kind": "Reference",
                  "text": "Namespace",
                  "canonicalReference": "@rainprotocol/rainlang!AST.Namespace:type"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "NamespaceNode",
                  "canonicalReference": "@rainprotocol/rainlang!AST.NamespaceNode:type"
                },
                {
                  "kind": "Content",
                  "text": ";\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "Namespace",
              "typeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              }
            },
            {
              "kind": "TypeAlias",
              "canonicalReference": "@rainprotocol/rainlang!AST.NamespaceNode:type",
              "docComment": "/**\n * Type for a namespace node\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "type NamespaceNode = "
                },
                {
                  "kind": "Content",
                  "text": "{\n        Hash: string;\n        ImportIndex: number;\n        Element: "
                },
                {
                  "kind": "Reference",
                  "text": "Meta.Authoring",
                  "canonicalReference": "@rainprotocol/meta!Meta.Authoring"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "Meta.Authoring",
                  "canonicalReference": "@rainprotocol/meta!Meta.Authoring"
                },
                {
                  "kind": "Content",
                  "text": "[] | "
                },
                {
                  "kind": "Reference",
                  "text": "Binding",
                  "canonicalReference": "@rainprotocol/rainlang!AST.Binding:type"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "ContextAlias",
                  "canonicalReference": "@rainprotocol/rainlang!AST.ContextAlias:type"
                },
                {
                  "kind": "Content",
                  "text": ";\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "NamespaceNode",
              "typeTokenRange": {
                "startIndex": 1,
                "endIndex": 10
              }
            },
            {
              "kind": "Namespace",
              "canonicalReference": "@rainprotocol/rainlang!AST.Node:namespace",
              "docComment": "/**\n * The namespace provides functionality to type check\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "namespace Node "
                }
              ],
              "releaseTag": "Public",
              "name": "Node",
              "preserveMemberOrder": false,
              "members": [
                {
                  "kind": "Function",
                  "canonicalReference": "@rainprotocol/rainlang!AST.Node.is:function(1)",
                  "docComment": "/**\n * Checks if a value is a valid Node\n *\n * @param value - The value to check\n *\n * @public\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "function is(value: "
                    },
                    {
                      "kind": "Content",
                      "text": "any"
                    },
                    {
                      "kind": "Content",
                      "text": "): "
                    },
                    {
                      "kind": "Reference",
                      "text": "value",
                      "canonicalReference": "@rainprotocol/rainlang!~value"
                    },
                    {
                      "kind": "Content",
                      "text": " is "
                    },
                    {
                      "kind": "Reference",
                      "text": "Node",
                      "canonicalReference": "@rainprotocol/rainlang!AST.Node:type"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "returnTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 6
                  },
                  "releaseTag": "Public",
                  "overloadIndex": 1,
                  "parameters": [
                    {
                      "parameterName": "value",
                      "parameterTypeTokenRange": {
                        "startIndex": 1,
                        "endIndex": 2
                      },
                      "isOptional": false
                    }
                  ],
                  "name": "is"
                }
              ]
            },
            {
              "kind": "TypeAlias",
              "canonicalReference": "@rainprotocol/rainlang!AST.Node:type",
              "docComment": "/**\n * Type of an AST node\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "type Node = "
                },
                {
                  "kind": "Reference",
                  "text": "Value",
                  "canonicalReference": "@rainprotocol/rainlang!AST.Value:interface"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "Opcode",
                  "canonicalReference": "@rainprotocol/rainlang!AST.Opcode:interface"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "Alias",
                  "canonicalReference": "@rainprotocol/rainlang!AST.Alias:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "Node",
              "typeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              }
            },
            {
              "kind": "Namespace",
              "canonicalReference": "@rainprotocol/rainlang!AST.Offsets:namespace",
              "docComment": "/**\n * The namespace provides functionality to type check\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "namespace Offsets "
                }
              ],
              "releaseTag": "Public",
              "name": "Offsets",
              "preserveMemberOrder": false,
              "members": [
                {
                  "kind": "Function",
                  "canonicalReference": "@rainprotocol/rainlang!AST.Offsets.is:function(1)",
                  "docComment": "/**\n * Checks if a value is a valid Offsets\n *\n * @param value - The value to check\n *\n * @public\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "function is(value: "
                    },
                    {
                      "kind": "Content",
                      "text": "any"
                    },
                    {
                      "kind": "Content",
                      "text": "): "
                    },
                    {
                      "kind": "Reference",
                      "text": "value",
                      "canonicalReference": "@rainprotocol/rainlang!~value"
                    },
                    {
                      "kind": "Content",
                      "text": " is "
                    },
                    {
                      "kind": "Reference",
                      "text": "Offsets",
                      "canonicalReference": "@rainprotocol/rainlang!AST.Offsets:type"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "returnTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 6
                  },
                  "releaseTag": "Public",
                  "overloadIndex": 1,
                  "parameters": [
                    {
                      "parameterName": "value",
                      "parameterTypeTokenRange": {
                        "startIndex": 1,
                        "endIndex": 2
                      },
                      "isOptional": false
                    }
                  ],
                  "name": "is"
                }
              ]
            },
            {
              "kind": "TypeAlias",
              "canonicalReference": "@rainprotocol/rainlang!AST.Offsets:type",
              "docComment": "/**\n * Type for start and end indexes of node in a text, inclusive at both ends\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "type Offsets = "
                },
                {
                  "kind": "Content",
                  "text": "[number, number]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "Offsets",
              "typeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "Interface",
              "canonicalReference": "@rainprotocol/rainlang!AST.Opcode:interface",
              "docComment": "/**\n * Type for Rainlang AST Opcode node\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "interface Opcode "
                }
              ],
              "releaseTag": "Public",
              "name": "Opcode",
              "preserveMemberOrder": false,
              "members": [
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@rainprotocol/rainlang!AST.Opcode#isCtx:member",
                  "docComment": "",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "isCtx?: "
                    },
                    {
                      "kind": "Content",
                      "text": "boolean"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": false,
                  "isOptional": true,
                  "releaseTag": "Public",
                  "name": "isCtx",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@rainprotocol/rainlang!AST.Opcode#lhsAlias:member",
                  "docComment": "",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "lhsAlias?: "
                    },
                    {
                      "kind": "Reference",
                      "text": "Alias",
                      "canonicalReference": "@rainprotocol/rainlang!AST.Alias:interface"
                    },
                    {
                      "kind": "Content",
                      "text": "[]"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": false,
                  "isOptional": true,
                  "releaseTag": "Public",
                  "name": "lhsAlias",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@rainprotocol/rainlang!AST.Opcode#opcode:member",
                  "docComment": "",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "opcode: "
                    },
                    {
                      "kind": "Content",
                      "text": "{\n            name: string;\n            description: string;\n            position: "
                    },
                    {
                      "kind": "Reference",
                      "text": "Offsets",
                      "canonicalReference": "@rainprotocol/rainlang!AST.Offsets:type"
                    },
                    {
                      "kind": "Content",
                      "text": ";\n        }"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": false,
                  "isOptional": false,
                  "releaseTag": "Public",
                  "name": "opcode",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 4
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@rainprotocol/rainlang!AST.Opcode#operand:member",
                  "docComment": "",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "operand: "
                    },
                    {
                      "kind": "Content",
                      "text": "number"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": false,
                  "isOptional": false,
                  "releaseTag": "Public",
                  "name": "operand",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@rainprotocol/rainlang!AST.Opcode#operandArgs:member",
                  "docComment": "",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "operandArgs?: "
                    },
                    {
                      "kind": "Content",
                      "text": "{\n            position: "
                    },
                    {
                      "kind": "Reference",
                      "text": "Offsets",
                      "canonicalReference": "@rainprotocol/rainlang!AST.Offsets:type"
                    },
                    {
                      "kind": "Content",
                      "text": ";\n            args: {\n                value: string;\n                name: string;\n                position: "
                    },
                    {
                      "kind": "Reference",
                      "text": "Offsets",
                      "canonicalReference": "@rainprotocol/rainlang!AST.Offsets:type"
                    },
                    {
                      "kind": "Content",
                      "text": ";\n                description: string;\n            }[];\n        }"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": false,
                  "isOptional": true,
                  "releaseTag": "Public",
                  "name": "operandArgs",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 6
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@rainprotocol/rainlang!AST.Opcode#output:member",
                  "docComment": "",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "output: "
                    },
                    {
                      "kind": "Content",
                      "text": "number"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": false,
                  "isOptional": false,
                  "releaseTag": "Public",
                  "name": "output",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@rainprotocol/rainlang!AST.Opcode#parameters:member",
                  "docComment": "",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "parameters: "
                    },
                    {
                      "kind": "Reference",
                      "text": "Node",
                      "canonicalReference": "@rainprotocol/rainlang!AST.Node:type"
                    },
                    {
                      "kind": "Content",
                      "text": "[]"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": false,
                  "isOptional": false,
                  "releaseTag": "Public",
                  "name": "parameters",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@rainprotocol/rainlang!AST.Opcode#parens:member",
                  "docComment": "",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "parens: "
                    },
                    {
                      "kind": "Reference",
                      "text": "Offsets",
                      "canonicalReference": "@rainprotocol/rainlang!AST.Offsets:type"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": false,
                  "isOptional": false,
                  "releaseTag": "Public",
                  "name": "parens",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@rainprotocol/rainlang!AST.Opcode#position:member",
                  "docComment": "",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "position: "
                    },
                    {
                      "kind": "Reference",
                      "text": "Offsets",
                      "canonicalReference": "@rainprotocol/rainlang!AST.Offsets:type"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": false,
                  "isOptional": false,
                  "releaseTag": "Public",
                  "name": "position",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "extendsTokenRanges": []
            },
            {
              "kind": "Namespace",
              "canonicalReference": "@rainprotocol/rainlang!AST.Opcode:namespace",
              "docComment": "/**\n * The namespace provides functionality to type check\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "namespace Opcode "
                }
              ],
              "releaseTag": "Public",
              "name": "Opcode",
              "preserveMemberOrder": false,
              "members": [
                {
                  "kind": "Function",
                  "canonicalReference": "@rainprotocol/rainlang!AST.Opcode.is:function(1)",
                  "docComment": "/**\n * Checks if a value is a valid Opcode\n *\n * @param value - The value to check\n *\n * @public\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "function is(value: "
                    },
                    {
                      "kind": "Content",
                      "text": "any"
                    },
                    {
                      "kind": "Content",
                      "text": "): "
                    },
                    {
                      "kind": "Reference",
                      "text": "value",
                      "canonicalReference": "@rainprotocol/rainlang!~value"
                    },
                    {
                      "kind": "Content",
                      "text": " is "
                    },
                    {
                      "kind": "Reference",
                      "text": "Opcode",
                      "canonicalReference": "@rainprotocol/rainlang!AST.Opcode:interface"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "returnTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 6
                  },
                  "releaseTag": "Public",
                  "overloadIndex": 1,
                  "parameters": [
                    {
                      "parameterName": "value",
                      "parameterTypeTokenRange": {
                        "startIndex": 1,
                        "endIndex": 2
                      },
                      "isOptional": false
                    }
                  ],
                  "name": "is"
                }
              ]
            },
            {
              "kind": "Interface",
              "canonicalReference": "@rainprotocol/rainlang!AST.Problem:interface",
              "docComment": "/**\n * Type for Rainlang/RainDocument problem\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "interface Problem "
                }
              ],
              "releaseTag": "Public",
              "name": "Problem",
              "preserveMemberOrder": false,
              "members": [
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@rainprotocol/rainlang!AST.Problem#code:member",
                  "docComment": "",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "code: "
                    },
                    {
                      "kind": "Content",
                      "text": "number"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": false,
                  "isOptional": false,
                  "releaseTag": "Public",
                  "name": "code",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@rainprotocol/rainlang!AST.Problem#msg:member",
                  "docComment": "",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "msg: "
                    },
                    {
                      "kind": "Content",
                      "text": "string"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": false,
                  "isOptional": false,
                  "releaseTag": "Public",
                  "name": "msg",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@rainprotocol/rainlang!AST.Problem#position:member",
                  "docComment": "",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "position: "
                    },
                    {
                      "kind": "Reference",
                      "text": "Offsets",
                      "canonicalReference": "@rainprotocol/rainlang!AST.Offsets:type"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": false,
                  "isOptional": false,
                  "releaseTag": "Public",
                  "name": "position",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "extendsTokenRanges": []
            },
            {
              "kind": "Namespace",
              "canonicalReference": "@rainprotocol/rainlang!AST.Problem:namespace",
              "docComment": "/**\n * The namespace provides functionality to type check\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "namespace Problem "
                }
              ],
              "releaseTag": "Public",
              "name": "Problem",
              "preserveMemberOrder": false,
              "members": [
                {
                  "kind": "Function",
                  "canonicalReference": "@rainprotocol/rainlang!AST.Problem.is:function(1)",
                  "docComment": "/**\n * Checks if a value is a valid ProblemASTNode\n *\n * @param value - The value to check\n *\n * @public\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "function is(value: "
                    },
                    {
                      "kind": "Content",
                      "text": "any"
                    },
                    {
                      "kind": "Content",
                      "text": "): "
                    },
                    {
                      "kind": "Reference",
                      "text": "value",
                      "canonicalReference": "@rainprotocol/rainlang!~value"
                    },
                    {
                      "kind": "Content",
                      "text": " is "
                    },
                    {
                      "kind": "Reference",
                      "text": "Problem",
                      "canonicalReference": "@rainprotocol/rainlang!AST.Problem:interface"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "returnTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 6
                  },
                  "releaseTag": "Public",
                  "overloadIndex": 1,
                  "parameters": [
                    {
                      "parameterName": "value",
                      "parameterTypeTokenRange": {
                        "startIndex": 1,
                        "endIndex": 2
                      },
                      "isOptional": false
                    }
                  ],
                  "name": "is"
                }
              ]
            },
            {
              "kind": "Namespace",
              "canonicalReference": "@rainprotocol/rainlang!AST.RainlangAST:namespace",
              "docComment": "/**\n * The namespace provides functionality to type check\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "namespace RainlangAST "
                }
              ],
              "releaseTag": "Public",
              "name": "RainlangAST",
              "preserveMemberOrder": false,
              "members": [
                {
                  "kind": "Function",
                  "canonicalReference": "@rainprotocol/rainlang!AST.RainlangAST.is:function(1)",
                  "docComment": "/**\n * Checks if a value is a valid RainlangAST\n *\n * @param value - The value to check\n *\n * @public\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "function is(value: "
                    },
                    {
                      "kind": "Content",
                      "text": "any"
                    },
                    {
                      "kind": "Content",
                      "text": "): "
                    },
                    {
                      "kind": "Reference",
                      "text": "value",
                      "canonicalReference": "@rainprotocol/rainlang!~value"
                    },
                    {
                      "kind": "Content",
                      "text": " is "
                    },
                    {
                      "kind": "Reference",
                      "text": "RainlangAST",
                      "canonicalReference": "@rainprotocol/rainlang!AST.RainlangAST:type"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "returnTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 6
                  },
                  "releaseTag": "Public",
                  "overloadIndex": 1,
                  "parameters": [
                    {
                      "parameterName": "value",
                      "parameterTypeTokenRange": {
                        "startIndex": 1,
                        "endIndex": 2
                      },
                      "isOptional": false
                    }
                  ],
                  "name": "is"
                },
                {
                  "kind": "Function",
                  "canonicalReference": "@rainprotocol/rainlang!AST.RainlangAST.isExpression:function(1)",
                  "docComment": "/**\n * Checks if a value is a valid RainlangAST Expression\n *\n * @param value - The value to check\n *\n * @public\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "function isExpression(value: "
                    },
                    {
                      "kind": "Content",
                      "text": "any"
                    },
                    {
                      "kind": "Content",
                      "text": "): "
                    },
                    {
                      "kind": "Content",
                      "text": "boolean"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "returnTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "releaseTag": "Public",
                  "overloadIndex": 1,
                  "parameters": [
                    {
                      "parameterName": "value",
                      "parameterTypeTokenRange": {
                        "startIndex": 1,
                        "endIndex": 2
                      },
                      "isOptional": false
                    }
                  ],
                  "name": "isExpression"
                }
              ]
            },
            {
              "kind": "TypeAlias",
              "canonicalReference": "@rainprotocol/rainlang!AST.RainlangAST:type",
              "docComment": "/**\n * Type of a Rainlang AST\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "type RainlangAST = "
                },
                {
                  "kind": "Content",
                  "text": "{\n        lines: {\n            nodes: "
                },
                {
                  "kind": "Reference",
                  "text": "Node",
                  "canonicalReference": "@rainprotocol/rainlang!AST.Node:type"
                },
                {
                  "kind": "Content",
                  "text": "[];\n            position: "
                },
                {
                  "kind": "Reference",
                  "text": "Offsets",
                  "canonicalReference": "@rainprotocol/rainlang!AST.Offsets:type"
                },
                {
                  "kind": "Content",
                  "text": ";\n            aliases: "
                },
                {
                  "kind": "Reference",
                  "text": "Alias",
                  "canonicalReference": "@rainprotocol/rainlang!AST.Alias:interface"
                },
                {
                  "kind": "Content",
                  "text": "[];\n        }[];\n        position: "
                },
                {
                  "kind": "Reference",
                  "text": "Offsets",
                  "canonicalReference": "@rainprotocol/rainlang!AST.Offsets:type"
                },
                {
                  "kind": "Content",
                  "text": ";\n    }[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "RainlangAST",
              "typeTokenRange": {
                "startIndex": 1,
                "endIndex": 10
              }
            },
            {
              "kind": "Interface",
              "canonicalReference": "@rainprotocol/rainlang!AST.Value:interface",
              "docComment": "/**\n * Type Rainlang AST Value node\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "interface Value "
                }
              ],
              "releaseTag": "Public",
              "name": "Value",
              "preserveMemberOrder": false,
              "members": [
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@rainprotocol/rainlang!AST.Value#id:member",
                  "docComment": "",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "id?: "
                    },
                    {
                      "kind": "Content",
                      "text": "string"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": false,
                  "isOptional": true,
                  "releaseTag": "Public",
                  "name": "id",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@rainprotocol/rainlang!AST.Value#lhsAlias:member",
                  "docComment": "",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "lhsAlias?: "
                    },
                    {
                      "kind": "Reference",
                      "text": "Alias",
                      "canonicalReference": "@rainprotocol/rainlang!AST.Alias:interface"
                    },
                    {
                      "kind": "Content",
                      "text": "[]"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": false,
                  "isOptional": true,
                  "releaseTag": "Public",
                  "name": "lhsAlias",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@rainprotocol/rainlang!AST.Value#position:member",
                  "docComment": "",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "position: "
                    },
                    {
                      "kind": "Reference",
                      "text": "Offsets",
                      "canonicalReference": "@rainprotocol/rainlang!AST.Offsets:type"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": false,
                  "isOptional": false,
                  "releaseTag": "Public",
                  "name": "position",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@rainprotocol/rainlang!AST.Value#value:member",
                  "docComment": "",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "value: "
                    },
                    {
                      "kind": "Content",
                      "text": "string"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": false,
                  "isOptional": false,
                  "releaseTag": "Public",
                  "name": "value",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "extendsTokenRanges": []
            },
            {
              "kind": "Namespace",
              "canonicalReference": "@rainprotocol/rainlang!AST.Value:namespace",
              "docComment": "/**\n * The namespace provides functionality to type check\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "namespace Value "
                }
              ],
              "releaseTag": "Public",
              "name": "Value",
              "preserveMemberOrder": false,
              "members": [
                {
                  "kind": "Function",
                  "canonicalReference": "@rainprotocol/rainlang!AST.Value.is:function(1)",
                  "docComment": "/**\n * Checks if a value is a valid Value\n *\n * @param value - The value to check\n *\n * @public\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "function is(value: "
                    },
                    {
                      "kind": "Content",
                      "text": "any"
                    },
                    {
                      "kind": "Content",
                      "text": "): "
                    },
                    {
                      "kind": "Reference",
                      "text": "value",
                      "canonicalReference": "@rainprotocol/rainlang!~value"
                    },
                    {
                      "kind": "Content",
                      "text": " is "
                    },
                    {
                      "kind": "Reference",
                      "text": "Value",
                      "canonicalReference": "@rainprotocol/rainlang!AST.Value:interface"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "returnTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 6
                  },
                  "releaseTag": "Public",
                  "overloadIndex": 1,
                  "parameters": [
                    {
                      "parameterName": "value",
                      "parameterTypeTokenRange": {
                        "startIndex": 1,
                        "endIndex": 2
                      },
                      "isOptional": false
                    }
                  ],
                  "name": "is"
                }
              ]
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@rainprotocol/rainlang!ClientCapabilities:interface",
          "docComment": "/**\n * Describes what LSP capabilities the client supports\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ClientCapabilities "
            }
          ],
          "fileUrlPath": "dist/types/languageTypes.d.ts",
          "releaseTag": "Public",
          "name": "ClientCapabilities",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@rainprotocol/rainlang!ClientCapabilities#textDocument:member",
              "docComment": "/**\n * The text document client capabilities\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "textDocument?: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        publishDiagnostics?: {\n            relatedInformation?: boolean;\n        };\n        completion?: {\n            completionItem?: {\n                documentationFormat?: "
                },
                {
                  "kind": "Reference",
                  "text": "MarkupKind",
                  "canonicalReference": "@rainprotocol/rainlang!~MarkupKind"
                },
                {
                  "kind": "Content",
                  "text": "[];\n            };\n        };\n        hover?: {\n            contentFormat?: "
                },
                {
                  "kind": "Reference",
                  "text": "MarkupKind",
                  "canonicalReference": "@rainprotocol/rainlang!~MarkupKind"
                },
                {
                  "kind": "Content",
                  "text": "[];\n        };\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "textDocument",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Namespace",
          "canonicalReference": "@rainprotocol/rainlang!ClientCapabilities:namespace",
          "docComment": "/**\n * Predefined latest client capabilities\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare namespace ClientCapabilities "
            }
          ],
          "fileUrlPath": "dist/types/languageTypes.d.ts",
          "releaseTag": "Public",
          "name": "ClientCapabilities",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Variable",
              "canonicalReference": "@rainprotocol/rainlang!ClientCapabilities.ALL:var",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "ALL: "
                },
                {
                  "kind": "Reference",
                  "text": "ClientCapabilities",
                  "canonicalReference": "@rainprotocol/rainlang!ClientCapabilities:interface"
                }
              ],
              "isReadonly": true,
              "releaseTag": "Public",
              "name": "ALL",
              "variableTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ]
        },
        {
          "kind": "Namespace",
          "canonicalReference": "@rainprotocol/rainlang!Compile:namespace",
          "docComment": "/**\n * Compile namespace provides methods for compiling rainlang or rain document text or instances\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare namespace Compile "
            }
          ],
          "fileUrlPath": "dist/types/parser/compiler.d.ts",
          "releaseTag": "Public",
          "name": "Compile",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "TypeAlias",
              "canonicalReference": "@rainprotocol/rainlang!Compile.Error:type",
              "docComment": "/**\n * Compile error\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "type Error = "
                },
                {
                  "kind": "Content",
                  "text": "{\n        name: string;\n        args: {\n            [key: string]: any;\n        };\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "Error",
              "typeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "TypeAlias",
              "canonicalReference": "@rainprotocol/rainlang!Compile.Options:type",
              "docComment": "/**\n * Compiler options\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "type Options = "
                },
                {
                  "kind": "Content",
                  "text": "{\n        metaStore?: "
                },
                {
                  "kind": "Reference",
                  "text": "Meta.Store",
                  "canonicalReference": "@rainprotocol/meta!Meta.Store:class"
                },
                {
                  "kind": "Content",
                  "text": ";\n        abi?: any;\n        evm?: "
                },
                {
                  "kind": "Reference",
                  "text": "EVM",
                  "canonicalReference": "@ethereumjs/evm!EVM:class"
                },
                {
                  "kind": "Content",
                  "text": ";\n        minOutputs?: number[];\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "Options",
              "typeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              }
            },
            {
              "kind": "Function",
              "canonicalReference": "@rainprotocol/rainlang!Compile.RainDocument:function(1)",
              "docComment": "/**\n * RainDocument compiler, compiles a text into valid ExpressionConfig\n *\n * @param text - The raw string to compile\n *\n * @param entrypoints - The entrypoints to compile\n *\n * @param options - (optional) Compiler options\n *\n * @returns A promise that resolves with ExpressionConfig and rejects with `undefined` if problems were found within the text\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function RainDocument(text: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", entrypoints: "
                },
                {
                  "kind": "Content",
                  "text": "string[]"
                },
                {
                  "kind": "Content",
                  "text": ", options?: "
                },
                {
                  "kind": "Reference",
                  "text": "Options",
                  "canonicalReference": "@rainprotocol/rainlang!Compile.Options:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ExpressionConfig",
                  "canonicalReference": "@rainprotocol/rainlang!ExpressionConfig:type"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 11
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "text",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "entrypoints",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": true
                }
              ],
              "name": "RainDocument"
            },
            {
              "kind": "Function",
              "canonicalReference": "@rainprotocol/rainlang!Compile.RainDocument:function(2)",
              "docComment": "/**\n * RainDocument compiler, compiles Text Documents into valid ExpressionConfig\n *\n * @param document - The TextDocument to compile\n *\n * @param entrypoints - The entrypoints to compile\n *\n * @param options - (optional) Compiler options\n *\n * @returns A promise that resolves with ExpressionConfig and rejects with `undefined` if problems were found within the text\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function RainDocument(document: "
                },
                {
                  "kind": "Reference",
                  "text": "TextDocument",
                  "canonicalReference": "@rainprotocol/rainlang!~TextDocument"
                },
                {
                  "kind": "Content",
                  "text": ", entrypoints: "
                },
                {
                  "kind": "Content",
                  "text": "string[]"
                },
                {
                  "kind": "Content",
                  "text": ", options?: "
                },
                {
                  "kind": "Reference",
                  "text": "Options",
                  "canonicalReference": "@rainprotocol/rainlang!Compile.Options:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ExpressionConfig",
                  "canonicalReference": "@rainprotocol/rainlang!ExpressionConfig:type"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 11
              },
              "releaseTag": "Public",
              "overloadIndex": 2,
              "parameters": [
                {
                  "parameterName": "document",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "entrypoints",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": true
                }
              ],
              "name": "RainDocument"
            },
            {
              "kind": "Function",
              "canonicalReference": "@rainprotocol/rainlang!Compile.RainDocument:function(3)",
              "docComment": "/**\n * RainDocument compiler, compiles Rain Documents into valid ExpressionConfig\n *\n * @param rainDocument - The RainDocument to compile\n *\n * @param entrypoints - The entrypoints to compile\n *\n * @param options - (optional) Compiler options\n *\n * @returns A promise that resolves with ExpressionConfig and rejects with `undefined` if problems were found within the text\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function RainDocument(rainDocument: "
                },
                {
                  "kind": "Reference",
                  "text": "RD",
                  "canonicalReference": "@rainprotocol/rainlang!RainDocument:class"
                },
                {
                  "kind": "Content",
                  "text": ", entrypoints: "
                },
                {
                  "kind": "Content",
                  "text": "string[]"
                },
                {
                  "kind": "Content",
                  "text": ", options?: "
                },
                {
                  "kind": "Reference",
                  "text": "Options",
                  "canonicalReference": "@rainprotocol/rainlang!Compile.Options:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ExpressionConfig",
                  "canonicalReference": "@rainprotocol/rainlang!ExpressionConfig:type"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 11
              },
              "releaseTag": "Public",
              "overloadIndex": 3,
              "parameters": [
                {
                  "parameterName": "rainDocument",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "entrypoints",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": true
                }
              ],
              "name": "RainDocument"
            },
            {
              "kind": "Function",
              "canonicalReference": "@rainprotocol/rainlang!Compile.Rainlang:function(1)",
              "docComment": "/**\n * Rain Language Compiler, compiles a text into valid ExpressionConfig\n *\n * @param text - The raw string to compile\n *\n * @param bytecode - ExpressionDeployerNP deployed bytecode\n *\n * @param entrypoints - The number of entrypoints\n *\n * @param options - (optional) Compiler options\n *\n * @returns A promise that resolves with ExpressionConfig and rejects with NPError\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function Rainlang(text: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", bytecode: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", entrypoints: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", options?: "
                },
                {
                  "kind": "Reference",
                  "text": "Options",
                  "canonicalReference": "@rainprotocol/rainlang!Compile.Options:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ExpressionConfig",
                  "canonicalReference": "@rainprotocol/rainlang!ExpressionConfig:type"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 13
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "text",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "bytecode",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "entrypoints",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  },
                  "isOptional": true
                }
              ],
              "name": "Rainlang"
            },
            {
              "kind": "Function",
              "canonicalReference": "@rainprotocol/rainlang!Compile.Rainlang:function(2)",
              "docComment": "/**\n * Rain Language Compiler, compiles a text into valid ExpressionConfig\n *\n * @param text - The raw string to compile\n *\n * @param bytecodeHash - The ExpressionDeployerNP deployed bytecode meta hash\n *\n * @param entrypoints - The number of entrypoints\n *\n * @param options - (optional) Compiler options\n *\n * @returns A promise that resolves with ExpressionConfig and rejects with problems found in text\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function Rainlang(text: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", bytecodeHash: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", entrypoints: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", options?: "
                },
                {
                  "kind": "Reference",
                  "text": "Options",
                  "canonicalReference": "@rainprotocol/rainlang!Compile.Options:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ExpressionConfig",
                  "canonicalReference": "@rainprotocol/rainlang!ExpressionConfig:type"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 13
              },
              "releaseTag": "Public",
              "overloadIndex": 2,
              "parameters": [
                {
                  "parameterName": "text",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "bytecodeHash",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "entrypoints",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  },
                  "isOptional": true
                }
              ],
              "name": "Rainlang"
            },
            {
              "kind": "Function",
              "canonicalReference": "@rainprotocol/rainlang!Compile.Rainlang:function(3)",
              "docComment": "/**\n * Rain Language Compiler, compiles a rainlang instance into valid ExpressionConfig\n *\n * @param rainlang - The Rainlang instance\n *\n * @param entrypoints - The number of entrypoints\n *\n * @param options - (optional) Compiler options\n *\n * @returns A promise that resolves with ExpressionConfig and rejects with problems found in text\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function Rainlang(rainlang: "
                },
                {
                  "kind": "Reference",
                  "text": "RL",
                  "canonicalReference": "@rainprotocol/rainlang!Rainlang:class"
                },
                {
                  "kind": "Content",
                  "text": ", entrypoints: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", options?: "
                },
                {
                  "kind": "Reference",
                  "text": "Options",
                  "canonicalReference": "@rainprotocol/rainlang!Compile.Options:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ExpressionConfig",
                  "canonicalReference": "@rainprotocol/rainlang!ExpressionConfig:type"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 11
              },
              "releaseTag": "Public",
              "overloadIndex": 3,
              "parameters": [
                {
                  "parameterName": "rainlang",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "entrypoints",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": true
                }
              ],
              "name": "Rainlang"
            }
          ]
        },
        {
          "kind": "Enum",
          "canonicalReference": "@rainprotocol/rainlang!CompletionTriggerKind:enum",
          "docComment": "/**\n * How a completion was triggered\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare enum CompletionTriggerKind "
            }
          ],
          "fileUrlPath": "dist/types/languageTypes.d.ts",
          "releaseTag": "Public",
          "name": "CompletionTriggerKind",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "EnumMember",
              "canonicalReference": "@rainprotocol/rainlang!CompletionTriggerKind.Invoked:member",
              "docComment": "/**\n * Completion was triggered by typing an identifier (24x7 code complete), manual invocation (e.g Ctrl+Space) or via API.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Invoked = "
                },
                {
                  "kind": "Content",
                  "text": "1"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "Invoked"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@rainprotocol/rainlang!CompletionTriggerKind.TriggerCharacter:member",
              "docComment": "/**\n * Completion was triggered by a trigger character specified by the `triggerCharacters` properties of the `CompletionRegistrationOptions`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "TriggerCharacter = "
                },
                {
                  "kind": "Content",
                  "text": "2"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "TriggerCharacter"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@rainprotocol/rainlang!CompletionTriggerKind.TriggerForIncompleteCompletions:member",
              "docComment": "/**\n * Completion was re-triggered as current completion list is incomplete\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "TriggerForIncompleteCompletions = "
                },
                {
                  "kind": "Content",
                  "text": "3"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "TriggerForIncompleteCompletions"
            }
          ]
        },
        {
          "kind": "Variable",
          "canonicalReference": "@rainprotocol/rainlang!concat:var",
          "docComment": "/**\n * ethers concat\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "concat: "
            },
            {
              "kind": "Content",
              "text": "typeof "
            },
            {
              "kind": "Reference",
              "text": "utils.concat",
              "canonicalReference": "@ethersproject/bytes!concat:function"
            }
          ],
          "fileUrlPath": "dist/types/utils.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "concat",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@rainprotocol/rainlang!CONSTANTS:var",
          "docComment": "/**\n * ethers constants\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "CONSTANTS: "
            },
            {
              "kind": "Content",
              "text": "typeof "
            },
            {
              "kind": "Reference",
              "text": "ethers.constants",
              "canonicalReference": "ethers!constants"
            }
          ],
          "fileUrlPath": "dist/types/utils.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "CONSTANTS",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "@rainprotocol/rainlang!deepCopy:function(1)",
          "docComment": "/**\n * Deep copy an item in a way that all of its properties get new reference\n *\n * @param variable - The variable to copy\n *\n * @returns a new deep copy of the variable\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function deepCopy<T>(variable: "
            },
            {
              "kind": "Content",
              "text": "T"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "T"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/types/utils.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "variable",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "deepCopy"
        },
        {
          "kind": "Function",
          "canonicalReference": "@rainprotocol/rainlang!deepFreeze:function(1)",
          "docComment": "/**\n * Deeply freezes an object, all of the properties of propterties gets frozen\n *\n * @param object - object to freeze\n *\n * @returns frozen object\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function deepFreeze(object: "
            },
            {
              "kind": "Content",
              "text": "any"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "any"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/types/utils.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "object",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "deepFreeze"
        },
        {
          "kind": "Variable",
          "canonicalReference": "@rainprotocol/rainlang!DEFAULT_ELISION:var",
          "docComment": "/**\n * the default elided binding msg\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "DEFAULT_ELISION = "
            },
            {
              "kind": "Content",
              "text": "\"elided binding, requires rebinding\""
            }
          ],
          "fileUrlPath": "dist/types/languageTypes.d.ts",
          "initializerTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "DEFAULT_ELISION",
          "variableTypeTokenRange": {
            "startIndex": 0,
            "endIndex": 0
          }
        },
        {
          "kind": "Enum",
          "canonicalReference": "@rainprotocol/rainlang!ErrorCode:enum",
          "docComment": "/**\n * Error codes of Rainlang/RainDocument problem and LSP Diagnostics\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare enum ErrorCode "
            }
          ],
          "fileUrlPath": "dist/types/languageTypes.d.ts",
          "releaseTag": "Public",
          "name": "ErrorCode",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "EnumMember",
              "canonicalReference": "@rainprotocol/rainlang!ErrorCode.CircularDependency:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "CircularDependency = "
                },
                {
                  "kind": "Content",
                  "text": "2"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "CircularDependency"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@rainprotocol/rainlang!ErrorCode.CorruptMeta:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "CorruptMeta = "
                },
                {
                  "kind": "Content",
                  "text": "6"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "CorruptMeta"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@rainprotocol/rainlang!ErrorCode.DeepImport:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "DeepImport = "
                },
                {
                  "kind": "Content",
                  "text": "4"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "DeepImport"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@rainprotocol/rainlang!ErrorCode.DeepNamespace:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "DeepNamespace = "
                },
                {
                  "kind": "Content",
                  "text": "5"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "DeepNamespace"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@rainprotocol/rainlang!ErrorCode.DuplicateAlias:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "DuplicateAlias = "
                },
                {
                  "kind": "Content",
                  "text": "1793"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "DuplicateAlias"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@rainprotocol/rainlang!ErrorCode.DuplicateIdentifier:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "DuplicateIdentifier = "
                },
                {
                  "kind": "Content",
                  "text": "1794"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "DuplicateIdentifier"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@rainprotocol/rainlang!ErrorCode.DuplicateImport:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "DuplicateImport = "
                },
                {
                  "kind": "Content",
                  "text": "1796"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "DuplicateImport"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@rainprotocol/rainlang!ErrorCode.DuplicateImportStatement:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "DuplicateImportStatement = "
                },
                {
                  "kind": "Content",
                  "text": "1795"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "DuplicateImportStatement"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@rainprotocol/rainlang!ErrorCode.ElidedBinding:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "ElidedBinding = "
                },
                {
                  "kind": "Content",
                  "text": "7"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "ElidedBinding"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@rainprotocol/rainlang!ErrorCode.ExpectedClosingAngleBracket:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "ExpectedClosingAngleBracket = "
                },
                {
                  "kind": "Content",
                  "text": "1030"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "ExpectedClosingAngleBracket"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@rainprotocol/rainlang!ErrorCode.ExpectedClosingParen:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "ExpectedClosingParen = "
                },
                {
                  "kind": "Content",
                  "text": "1028"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "ExpectedClosingParen"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@rainprotocol/rainlang!ErrorCode.ExpectedElisionOrRebinding:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "ExpectedElisionOrRebinding = "
                },
                {
                  "kind": "Content",
                  "text": "1027"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "ExpectedElisionOrRebinding"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@rainprotocol/rainlang!ErrorCode.ExpectedHash:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "ExpectedHash = "
                },
                {
                  "kind": "Content",
                  "text": "1033"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "ExpectedHash"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@rainprotocol/rainlang!ErrorCode.ExpectedName:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "ExpectedName = "
                },
                {
                  "kind": "Content",
                  "text": "1031"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "ExpectedName"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@rainprotocol/rainlang!ErrorCode.ExpectedOpcode:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "ExpectedOpcode = "
                },
                {
                  "kind": "Content",
                  "text": "1025"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "ExpectedOpcode"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@rainprotocol/rainlang!ErrorCode.ExpectedOpeningParen:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "ExpectedOpeningParen = "
                },
                {
                  "kind": "Content",
                  "text": "1029"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "ExpectedOpeningParen"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@rainprotocol/rainlang!ErrorCode.ExpectedOperandArgs:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "ExpectedOperandArgs = "
                },
                {
                  "kind": "Content",
                  "text": "1040"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "ExpectedOperandArgs"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@rainprotocol/rainlang!ErrorCode.ExpectedSemi:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "ExpectedSemi = "
                },
                {
                  "kind": "Content",
                  "text": "1032"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "ExpectedSemi"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@rainprotocol/rainlang!ErrorCode.ExpectedSpace:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "ExpectedSpace = "
                },
                {
                  "kind": "Content",
                  "text": "1026"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "ExpectedSpace"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@rainprotocol/rainlang!ErrorCode.IllegalChar:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "IllegalChar = "
                },
                {
                  "kind": "Content",
                  "text": "0"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "IllegalChar"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@rainprotocol/rainlang!ErrorCode.InconsumableMeta:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "InconsumableMeta = "
                },
                {
                  "kind": "Content",
                  "text": "11"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "InconsumableMeta"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@rainprotocol/rainlang!ErrorCode.InvalidBindingIdentifier:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "InvalidBindingIdentifier = "
                },
                {
                  "kind": "Content",
                  "text": "528"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "InvalidBindingIdentifier"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@rainprotocol/rainlang!ErrorCode.InvalidEmptyBinding:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "InvalidEmptyBinding = "
                },
                {
                  "kind": "Content",
                  "text": "521"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "InvalidEmptyBinding"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@rainprotocol/rainlang!ErrorCode.InvalidExpression:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "InvalidExpression = "
                },
                {
                  "kind": "Content",
                  "text": "514"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "InvalidExpression"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@rainprotocol/rainlang!ErrorCode.InvalidHash:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "InvalidHash = "
                },
                {
                  "kind": "Content",
                  "text": "517"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "InvalidHash"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@rainprotocol/rainlang!ErrorCode.InvalidImport:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "InvalidImport = "
                },
                {
                  "kind": "Content",
                  "text": "520"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "InvalidImport"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@rainprotocol/rainlang!ErrorCode.InvalidNestedNode:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "InvalidNestedNode = "
                },
                {
                  "kind": "Content",
                  "text": "515"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "InvalidNestedNode"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@rainprotocol/rainlang!ErrorCode.InvalidOperandArg:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "InvalidOperandArg = "
                },
                {
                  "kind": "Content",
                  "text": "530"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "InvalidOperandArg"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@rainprotocol/rainlang!ErrorCode.InvalidQuote:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "InvalidQuote = "
                },
                {
                  "kind": "Content",
                  "text": "529"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "InvalidQuote"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@rainprotocol/rainlang!ErrorCode.InvalidRainDocument:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "InvalidRainDocument = "
                },
                {
                  "kind": "Content",
                  "text": "532"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "InvalidRainDocument"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@rainprotocol/rainlang!ErrorCode.InvalidReference:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "InvalidReference = "
                },
                {
                  "kind": "Content",
                  "text": "531"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "InvalidReference"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@rainprotocol/rainlang!ErrorCode.InvalidSelfReference:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "InvalidSelfReference = "
                },
                {
                  "kind": "Content",
                  "text": "516"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "InvalidSelfReference"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@rainprotocol/rainlang!ErrorCode.InvalidWordPattern:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "InvalidWordPattern = "
                },
                {
                  "kind": "Content",
                  "text": "513"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "InvalidWordPattern"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@rainprotocol/rainlang!ErrorCode.MismatchLHS:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "MismatchLHS = "
                },
                {
                  "kind": "Content",
                  "text": "1282"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "MismatchLHS"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@rainprotocol/rainlang!ErrorCode.MismatchOperandArgs:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "MismatchOperandArgs = "
                },
                {
                  "kind": "Content",
                  "text": "1283"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "MismatchOperandArgs"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@rainprotocol/rainlang!ErrorCode.MismatchRHS:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "MismatchRHS = "
                },
                {
                  "kind": "Content",
                  "text": "1281"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "MismatchRHS"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@rainprotocol/rainlang!ErrorCode.MultipleWords:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "MultipleWords = "
                },
                {
                  "kind": "Content",
                  "text": "9"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "MultipleWords"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@rainprotocol/rainlang!ErrorCode.OutOfRangeInputs:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "OutOfRangeInputs = "
                },
                {
                  "kind": "Content",
                  "text": "1537"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "OutOfRangeInputs"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@rainprotocol/rainlang!ErrorCode.OutOfRangeOperandArgs:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "OutOfRangeOperandArgs = "
                },
                {
                  "kind": "Content",
                  "text": "1538"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "OutOfRangeOperandArgs"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@rainprotocol/rainlang!ErrorCode.OutOfRangeValue:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "OutOfRangeValue = "
                },
                {
                  "kind": "Content",
                  "text": "1539"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "OutOfRangeValue"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@rainprotocol/rainlang!ErrorCode.RuntimeError:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "RuntimeError = "
                },
                {
                  "kind": "Content",
                  "text": "1"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "RuntimeError"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@rainprotocol/rainlang!ErrorCode.SingletonWords:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "SingletonWords = "
                },
                {
                  "kind": "Content",
                  "text": "8"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "SingletonWords"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@rainprotocol/rainlang!ErrorCode.SingleWordModify:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "SingleWordModify = "
                },
                {
                  "kind": "Content",
                  "text": "10"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "SingleWordModify"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@rainprotocol/rainlang!ErrorCode.UndefinedAuthoringMeta:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "UndefinedAuthoringMeta = "
                },
                {
                  "kind": "Content",
                  "text": "258"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "UndefinedAuthoringMeta"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@rainprotocol/rainlang!ErrorCode.UndefinedDISpair:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "UndefinedDISpair = "
                },
                {
                  "kind": "Content",
                  "text": "776"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "UndefinedDISpair"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@rainprotocol/rainlang!ErrorCode.UndefinedIdentifier:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "UndefinedIdentifier = "
                },
                {
                  "kind": "Content",
                  "text": "262"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "UndefinedIdentifier"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@rainprotocol/rainlang!ErrorCode.UndefinedMeta:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "UndefinedMeta = "
                },
                {
                  "kind": "Content",
                  "text": "259"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "UndefinedMeta"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@rainprotocol/rainlang!ErrorCode.UndefinedNamespaceMember:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "UndefinedNamespaceMember = "
                },
                {
                  "kind": "Content",
                  "text": "777"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "UndefinedNamespaceMember"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@rainprotocol/rainlang!ErrorCode.UndefinedOpcode:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "UndefinedOpcode = "
                },
                {
                  "kind": "Content",
                  "text": "261"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "UndefinedOpcode"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@rainprotocol/rainlang!ErrorCode.UndefinedQuote:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "UndefinedQuote = "
                },
                {
                  "kind": "Content",
                  "text": "260"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "UndefinedQuote"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@rainprotocol/rainlang!ErrorCode.UndefinedWord:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "UndefinedWord = "
                },
                {
                  "kind": "Content",
                  "text": "257"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "UndefinedWord"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@rainprotocol/rainlang!ErrorCode.UnexpectedClosingAngleParen:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "UnexpectedClosingAngleParen = "
                },
                {
                  "kind": "Content",
                  "text": "773"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "UnexpectedClosingAngleParen"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@rainprotocol/rainlang!ErrorCode.UnexpectedClosingParen:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "UnexpectedClosingParen = "
                },
                {
                  "kind": "Content",
                  "text": "770"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "UnexpectedClosingParen"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@rainprotocol/rainlang!ErrorCode.UnexpectedComment:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "UnexpectedComment = "
                },
                {
                  "kind": "Content",
                  "text": "775"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "UnexpectedComment"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@rainprotocol/rainlang!ErrorCode.UnexpectedEndOfComment:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "UnexpectedEndOfComment = "
                },
                {
                  "kind": "Content",
                  "text": "774"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "UnexpectedEndOfComment"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@rainprotocol/rainlang!ErrorCode.UnexpectedNamespacePath:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "UnexpectedNamespacePath = "
                },
                {
                  "kind": "Content",
                  "text": "771"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "UnexpectedNamespacePath"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@rainprotocol/rainlang!ErrorCode.UnexpectedRebinding:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "UnexpectedRebinding = "
                },
                {
                  "kind": "Content",
                  "text": "772"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "UnexpectedRebinding"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@rainprotocol/rainlang!ErrorCode.UnexpectedToken:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "UnexpectedToken = "
                },
                {
                  "kind": "Content",
                  "text": "769"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "UnexpectedToken"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@rainprotocol/rainlang!ErrorCode.UnresolvableDependencies:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "UnresolvableDependencies = "
                },
                {
                  "kind": "Content",
                  "text": "3"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "UnresolvableDependencies"
            }
          ]
        },
        {
          "kind": "Function",
          "canonicalReference": "@rainprotocol/rainlang!exclusiveParse:function(1)",
          "docComment": "/**\n * Parses an string by extracting the strings outside of matches\n *\n * @param str - The string to parse\n *\n * @param pattern - The pattern to search and extract\n *\n * @param offset - (optional) The offset to factor in for returning matched positions\n *\n * @param includeEmptyEnds - (optional) Includes start/end empty matches in the results if true\n *\n * @returns An array of strings outside of matchings and their position inclusive at both ends\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function exclusiveParse(str: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", pattern: "
            },
            {
              "kind": "Reference",
              "text": "RegExp",
              "canonicalReference": "!RegExp:interface"
            },
            {
              "kind": "Content",
              "text": ", offset?: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ", includeEmptyEnds?: "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "ParsedChunk",
              "canonicalReference": "@rainprotocol/rainlang!ParsedChunk:type"
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/types/utils.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 9,
            "endIndex": 11
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "str",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "pattern",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            },
            {
              "parameterName": "offset",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "isOptional": true
            },
            {
              "parameterName": "includeEmptyEnds",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "isOptional": true
            }
          ],
          "name": "exclusiveParse"
        },
        {
          "kind": "Function",
          "canonicalReference": "@rainprotocol/rainlang!execBytecode:function(1)",
          "docComment": "/**\n * Executes a contract bytecode given the contract abi, fnunction name and args\n *\n * @param bytecode - The contract deployed byetcode\n *\n * @param abi - The contract ABI\n *\n * @param fn - The contract function name\n *\n * @param args - The function args\n *\n * @param evm - (optional) An EVM instance\n *\n * @returns A promise that resolves with a execution returned value or rejects if an exception error\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function execBytecode(bytecode: "
            },
            {
              "kind": "Reference",
              "text": "BytesLike",
              "canonicalReference": "@ethersproject/bytes!BytesLike:type"
            },
            {
              "kind": "Content",
              "text": ", abi: "
            },
            {
              "kind": "Content",
              "text": "any"
            },
            {
              "kind": "Content",
              "text": ", fn: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", args: "
            },
            {
              "kind": "Content",
              "text": "any[]"
            },
            {
              "kind": "Content",
              "text": ", evm?: "
            },
            {
              "kind": "Reference",
              "text": "EVM",
              "canonicalReference": "@ethereumjs/evm!EVM:class"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "utils.Result",
              "canonicalReference": "@ethersproject/abi!Result:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/types/utils.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 11,
            "endIndex": 15
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "bytecode",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "abi",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            },
            {
              "parameterName": "fn",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "isOptional": false
            },
            {
              "parameterName": "args",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "isOptional": false
            },
            {
              "parameterName": "evm",
              "parameterTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "isOptional": true
            }
          ],
          "name": "execBytecode"
        },
        {
          "kind": "Function",
          "canonicalReference": "@rainprotocol/rainlang!execBytecode:function(2)",
          "docComment": "/**\n * Executes a bytecode with given data\n *\n * @param bytecode - The bytecode to execute\n *\n * @param data - The data\n *\n * @param evm - (optional) An EVM instance\n *\n * @returns The execution results as Uint8Array\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function execBytecode(bytecode: "
            },
            {
              "kind": "Reference",
              "text": "BytesLike",
              "canonicalReference": "@ethersproject/bytes!BytesLike:type"
            },
            {
              "kind": "Content",
              "text": ", data: "
            },
            {
              "kind": "Reference",
              "text": "BytesLike",
              "canonicalReference": "@ethersproject/bytes!BytesLike:type"
            },
            {
              "kind": "Content",
              "text": ", evm?: "
            },
            {
              "kind": "Reference",
              "text": "EVM",
              "canonicalReference": "@ethereumjs/evm!EVM:class"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "Uint8Array",
              "canonicalReference": "!Uint8Array:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/types/utils.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 11
          },
          "releaseTag": "Public",
          "overloadIndex": 2,
          "parameters": [
            {
              "parameterName": "bytecode",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "data",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            },
            {
              "parameterName": "evm",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "isOptional": true
            }
          ],
          "name": "execBytecode"
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@rainprotocol/rainlang!ExpressionConfig:type",
          "docComment": "/**\n * Type of valid parsed expression, i.e. compiled bytes\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type ExpressionConfig = "
            },
            {
              "kind": "Content",
              "text": "{\n    bytecode: "
            },
            {
              "kind": "Reference",
              "text": "BytesLike",
              "canonicalReference": "@ethersproject/bytes!BytesLike:type"
            },
            {
              "kind": "Content",
              "text": ";\n    constants: "
            },
            {
              "kind": "Reference",
              "text": "BigNumberish",
              "canonicalReference": "@ethersproject/bignumber!BigNumberish:type"
            },
            {
              "kind": "Content",
              "text": "[];\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/types/languageTypes.d.ts",
          "releaseTag": "Public",
          "name": "ExpressionConfig",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 6
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "@rainprotocol/rainlang!extractFromMap:function(1)",
          "docComment": "/**\n * Extract some of the properties from a Map as a new Map with same keys.\n *\n * @param map - the map to extract from\n *\n * @param properties - name of the properties in second item of the map elements\n *\n * @returns a new Map with extracted properties\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function extractFromMap(map: "
            },
            {
              "kind": "Reference",
              "text": "Map",
              "canonicalReference": "!Map:interface"
            },
            {
              "kind": "Content",
              "text": "<any, any>"
            },
            {
              "kind": "Content",
              "text": ", properties: "
            },
            {
              "kind": "Content",
              "text": "string[]"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Map",
              "canonicalReference": "!Map:interface"
            },
            {
              "kind": "Content",
              "text": "<any, any>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/types/utils.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 6,
            "endIndex": 8
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "map",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isOptional": false
            },
            {
              "parameterName": "properties",
              "parameterTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 5
              },
              "isOptional": false
            }
          ],
          "name": "extractFromMap"
        },
        {
          "kind": "Function",
          "canonicalReference": "@rainprotocol/rainlang!extractFromRecord:function(1)",
          "docComment": "/**\n * Extract some of the properties from a Record as new Record with same keys.\n *\n * @param record - the record to extract from.\n *\n * @param properties - name of the properties in value item of the key/va;ue pair of a Record object\n *\n * @returns a new Record with extracted key/value pairs\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function extractFromRecord<T extends "
            },
            {
              "kind": "Content",
              "text": "string | number | symbol"
            },
            {
              "kind": "Content",
              "text": ">(record: "
            },
            {
              "kind": "Reference",
              "text": "Record",
              "canonicalReference": "!Record:type"
            },
            {
              "kind": "Content",
              "text": "<T, any>"
            },
            {
              "kind": "Content",
              "text": ", properties: "
            },
            {
              "kind": "Content",
              "text": "string | string[]"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Record",
              "canonicalReference": "!Record:type"
            },
            {
              "kind": "Content",
              "text": "<T, any>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/types/utils.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 8,
            "endIndex": 10
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "record",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "isOptional": false
            },
            {
              "parameterName": "properties",
              "parameterTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              },
              "isOptional": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "extractFromRecord"
        },
        {
          "kind": "Function",
          "canonicalReference": "@rainprotocol/rainlang!fillIn:function(1)",
          "docComment": "/**\n * Fills a poistion in a text with whitespaces by keeping line structure intact\n *\n * @param text - The text\n *\n * @param position - The position offsets to include\n *\n * @returns The edited text string\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function fillIn(text: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", position: "
            },
            {
              "kind": "Reference",
              "text": "AST.Offsets",
              "canonicalReference": "@rainprotocol/rainlang!AST.Offsets:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/types/utils.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "text",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "position",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "name": "fillIn"
        },
        {
          "kind": "Function",
          "canonicalReference": "@rainprotocol/rainlang!fillOut:function(1)",
          "docComment": "/**\n * Fills a text with whitespaces excluding a position by keeping line structure intact\n *\n * @param text - The text\n *\n * @param position - the position to exclude\n *\n * @returns The edited text string\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function fillOut(text: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", position: "
            },
            {
              "kind": "Reference",
              "text": "AST.Offsets",
              "canonicalReference": "@rainprotocol/rainlang!AST.Offsets:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/types/utils.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "text",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "position",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "name": "fillOut"
        },
        {
          "kind": "Function",
          "canonicalReference": "@rainprotocol/rainlang!getCompletion:function(1)",
          "docComment": "/**\n * Provides completion items\n *\n * @param document - The TextDocuemnt\n *\n * @param position - Position of the textDocument to get the completion items for\n *\n * @param setting - (optional) Language service params\n *\n * @returns A promise that resolves with Completion items or null if no completion items were available for that position\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getCompletion(document: "
            },
            {
              "kind": "Reference",
              "text": "TextDocument",
              "canonicalReference": "@rainprotocol/rainlang!~TextDocument"
            },
            {
              "kind": "Content",
              "text": ", position: "
            },
            {
              "kind": "Reference",
              "text": "Position",
              "canonicalReference": "@rainprotocol/rainlang!~Position"
            },
            {
              "kind": "Content",
              "text": ", setting?: "
            },
            {
              "kind": "Reference",
              "text": "LanguageServiceParams",
              "canonicalReference": "@rainprotocol/rainlang!LanguageServiceParams:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "CompletionItem",
              "canonicalReference": "@rainprotocol/rainlang!~CompletionItem"
            },
            {
              "kind": "Content",
              "text": "[] | null>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/types/services/completion.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 11
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "document",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "position",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            },
            {
              "parameterName": "setting",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "isOptional": true
            }
          ],
          "name": "getCompletion"
        },
        {
          "kind": "Function",
          "canonicalReference": "@rainprotocol/rainlang!getCompletion:function(2)",
          "docComment": "/**\n * Provides completion items\n *\n * @param document - The RainDocument object instance\n *\n * @param position - Position of the textDocument to get the completion items for\n *\n * @param setting - (optional) Language service params\n *\n * @returns A promise that resolves with Completion items or null if no completion items were available for that position\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getCompletion(document: "
            },
            {
              "kind": "Reference",
              "text": "RainDocument",
              "canonicalReference": "@rainprotocol/rainlang!RainDocument:class"
            },
            {
              "kind": "Content",
              "text": ", position: "
            },
            {
              "kind": "Reference",
              "text": "Position",
              "canonicalReference": "@rainprotocol/rainlang!~Position"
            },
            {
              "kind": "Content",
              "text": ", setting?: "
            },
            {
              "kind": "Reference",
              "text": "LanguageServiceParams",
              "canonicalReference": "@rainprotocol/rainlang!LanguageServiceParams:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "CompletionItem",
              "canonicalReference": "@rainprotocol/rainlang!~CompletionItem"
            },
            {
              "kind": "Content",
              "text": "[] | null>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/types/services/completion.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 11
          },
          "releaseTag": "Public",
          "overloadIndex": 2,
          "parameters": [
            {
              "parameterName": "document",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "position",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            },
            {
              "parameterName": "setting",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "isOptional": true
            }
          ],
          "name": "getCompletion"
        },
        {
          "kind": "Function",
          "canonicalReference": "@rainprotocol/rainlang!getDiagnostics:function(1)",
          "docComment": "/**\n * Provides diagnostics\n *\n * @param document - The TextDocument\n *\n * @param setting - (optional) Language service params\n *\n * @returns A promise that resolves with diagnostics\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getDiagnostics(document: "
            },
            {
              "kind": "Reference",
              "text": "TextDocument",
              "canonicalReference": "@rainprotocol/rainlang!~TextDocument"
            },
            {
              "kind": "Content",
              "text": ", setting?: "
            },
            {
              "kind": "Reference",
              "text": "LanguageServiceParams",
              "canonicalReference": "@rainprotocol/rainlang!LanguageServiceParams:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "Diagnostic",
              "canonicalReference": "@rainprotocol/rainlang!~Diagnostic"
            },
            {
              "kind": "Content",
              "text": "[]>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/types/services/diagnostics.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 9
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "document",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "setting",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": true
            }
          ],
          "name": "getDiagnostics"
        },
        {
          "kind": "Function",
          "canonicalReference": "@rainprotocol/rainlang!getDiagnostics:function(2)",
          "docComment": "/**\n * Provides diagnostics\n *\n * @param document - The RainDocument\n *\n * @param setting - (optional) Language service params\n *\n * @returns A promise that resolves with diagnostics\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getDiagnostics(document: "
            },
            {
              "kind": "Reference",
              "text": "RainDocument",
              "canonicalReference": "@rainprotocol/rainlang!RainDocument:class"
            },
            {
              "kind": "Content",
              "text": ", setting?: "
            },
            {
              "kind": "Reference",
              "text": "LanguageServiceParams",
              "canonicalReference": "@rainprotocol/rainlang!LanguageServiceParams:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "Diagnostic",
              "canonicalReference": "@rainprotocol/rainlang!~Diagnostic"
            },
            {
              "kind": "Content",
              "text": "[]>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/types/services/diagnostics.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 9
          },
          "releaseTag": "Public",
          "overloadIndex": 2,
          "parameters": [
            {
              "parameterName": "document",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "setting",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": true
            }
          ],
          "name": "getDiagnostics"
        },
        {
          "kind": "Function",
          "canonicalReference": "@rainprotocol/rainlang!getHover:function(1)",
          "docComment": "/**\n * Provides hover items\n *\n * @param document - The TextDocuemnt\n *\n * @param position - Position of the textDocument to get the completion items for\n *\n * @param setting - (optional) Language service params\n *\n * @returns Promise of hover item and null if no item was available for that position\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getHover(document: "
            },
            {
              "kind": "Reference",
              "text": "TextDocument",
              "canonicalReference": "@rainprotocol/rainlang!~TextDocument"
            },
            {
              "kind": "Content",
              "text": ", position: "
            },
            {
              "kind": "Reference",
              "text": "Position",
              "canonicalReference": "@rainprotocol/rainlang!~Position"
            },
            {
              "kind": "Content",
              "text": ", setting?: "
            },
            {
              "kind": "Reference",
              "text": "LanguageServiceParams",
              "canonicalReference": "@rainprotocol/rainlang!LanguageServiceParams:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "Hover",
              "canonicalReference": "@rainprotocol/rainlang!~Hover"
            },
            {
              "kind": "Content",
              "text": " | null>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/types/services/hover.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 11
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "document",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "position",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            },
            {
              "parameterName": "setting",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "isOptional": true
            }
          ],
          "name": "getHover"
        },
        {
          "kind": "Function",
          "canonicalReference": "@rainprotocol/rainlang!getHover:function(2)",
          "docComment": "/**\n * Provides hover items\n *\n * @param document - The RainDocument object instance\n *\n * @param position - Position of the textDocument to get the completion items for\n *\n * @param setting - (optional) Language service params\n *\n * @returns Promise of hover item and null if no item was available for that position\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getHover(document: "
            },
            {
              "kind": "Reference",
              "text": "RainDocument",
              "canonicalReference": "@rainprotocol/rainlang!RainDocument:class"
            },
            {
              "kind": "Content",
              "text": ", position: "
            },
            {
              "kind": "Reference",
              "text": "Position",
              "canonicalReference": "@rainprotocol/rainlang!~Position"
            },
            {
              "kind": "Content",
              "text": ", setting?: "
            },
            {
              "kind": "Reference",
              "text": "LanguageServiceParams",
              "canonicalReference": "@rainprotocol/rainlang!LanguageServiceParams:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "Hover",
              "canonicalReference": "@rainprotocol/rainlang!~Hover"
            },
            {
              "kind": "Content",
              "text": " | null>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/types/services/hover.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 11
          },
          "releaseTag": "Public",
          "overloadIndex": 2,
          "parameters": [
            {
              "parameterName": "document",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "position",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            },
            {
              "parameterName": "setting",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "isOptional": true
            }
          ],
          "name": "getHover"
        },
        {
          "kind": "Function",
          "canonicalReference": "@rainprotocol/rainlang!getLineText:function(1)",
          "docComment": "/**\n * Method to get a line from a TextDocument\n *\n * @param textDocument - The TextDocument instance\n *\n * @param line - The line to get its content\n *\n * @returns The text string of the line\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getLineText(textDocument: "
            },
            {
              "kind": "Reference",
              "text": "TextDocument",
              "canonicalReference": "@rainprotocol/rainlang!~TextDocument"
            },
            {
              "kind": "Content",
              "text": ", line: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/types/utils.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "textDocument",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "line",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "name": "getLineText"
        },
        {
          "kind": "Function",
          "canonicalReference": "@rainprotocol/rainlang!getRainLanguageServices:function(1)",
          "docComment": "/**\n * Main function to get Rain language services initiated and ready to receive TextDocuments to provide the desired language services\n *\n * @example\n * ```ts\n * // importing\n * import { getRainLanguageServices } from \"@rainprotocol/rainlang\";\n *\n * // initiating the services\n * const langServices = getRainLanguageServices({clientCapabilities, metastore});\n *\n * // getting validation results (lsp Diagnostics)\n * const errors = await langServices.doValidate(myTextDocument);\n * ```\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getRainLanguageServices(params?: "
            },
            {
              "kind": "Reference",
              "text": "LanguageServiceParams",
              "canonicalReference": "@rainprotocol/rainlang!LanguageServiceParams:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "RainLanguageServices",
              "canonicalReference": "@rainprotocol/rainlang!RainLanguageServices:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/types/languageService.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "params",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": true
            }
          ],
          "name": "getRainLanguageServices"
        },
        {
          "kind": "Function",
          "canonicalReference": "@rainprotocol/rainlang!getRandomInt:function(1)",
          "docComment": "/**\n * Generates random integer between 0(inclusive) and max(exclusive)\n *\n * @param max - The maximum range to generate random number\n *\n * @returns The random number\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getRandomInt(max: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/types/utils.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "max",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "getRandomInt"
        },
        {
          "kind": "Function",
          "canonicalReference": "@rainprotocol/rainlang!hasDuplicate:function(1)",
          "docComment": "/**\n * Method to check there is a duplicate id in 2 arrays of string\n *\n * @param arr1 - Firts string array\n *\n * @param arr2 - Second string array\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function hasDuplicate(arr1: "
            },
            {
              "kind": "Content",
              "text": "string[]"
            },
            {
              "kind": "Content",
              "text": ", arr2: "
            },
            {
              "kind": "Content",
              "text": "string[]"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/types/utils.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "arr1",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "arr2",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "name": "hasDuplicate"
        },
        {
          "kind": "Variable",
          "canonicalReference": "@rainprotocol/rainlang!HASH_PATTERN:var",
          "docComment": "/**\n * Import hash pattern\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "HASH_PATTERN: "
            },
            {
              "kind": "Reference",
              "text": "RegExp",
              "canonicalReference": "!RegExp:interface"
            }
          ],
          "fileUrlPath": "dist/types/languageTypes.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "HASH_PATTERN",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@rainprotocol/rainlang!HEX_PATTERN:var",
          "docComment": "/**\n * Hex pattern\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "HEX_PATTERN: "
            },
            {
              "kind": "Reference",
              "text": "RegExp",
              "canonicalReference": "!RegExp:interface"
            }
          ],
          "fileUrlPath": "dist/types/languageTypes.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "HEX_PATTERN",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@rainprotocol/rainlang!hexlify:var",
          "docComment": "/**\n * ethers hexlify\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "hexlify: "
            },
            {
              "kind": "Content",
              "text": "typeof "
            },
            {
              "kind": "Reference",
              "text": "utils.hexlify",
              "canonicalReference": "@ethersproject/bytes!hexlify:function"
            }
          ],
          "fileUrlPath": "dist/types/utils.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "hexlify",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@rainprotocol/rainlang!hexZeroPad:var",
          "docComment": "/**\n * ethers hexZeroPad\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "hexZeroPad: "
            },
            {
              "kind": "Content",
              "text": "typeof "
            },
            {
              "kind": "Reference",
              "text": "utils.hexZeroPad",
              "canonicalReference": "@ethersproject/bytes!hexZeroPad:function"
            }
          ],
          "fileUrlPath": "dist/types/utils.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "hexZeroPad",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@rainprotocol/rainlang!ILLEGAL_CHAR:var",
          "docComment": "/**\n * Illegal character pattern\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "ILLEGAL_CHAR: "
            },
            {
              "kind": "Reference",
              "text": "RegExp",
              "canonicalReference": "!RegExp:interface"
            }
          ],
          "fileUrlPath": "dist/types/languageTypes.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "ILLEGAL_CHAR",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "@rainprotocol/rainlang!inclusiveParse:function(1)",
          "docComment": "/**\n * Parses an string by extracting matching strings\n *\n * @param str - The string to parse\n *\n * @param pattern - The pattern to search and extract\n *\n * @param offset - (optional) The offset to factor in for returning matched positions\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function inclusiveParse(str: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", pattern: "
            },
            {
              "kind": "Reference",
              "text": "RegExp",
              "canonicalReference": "!RegExp:interface"
            },
            {
              "kind": "Content",
              "text": ", offset?: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "ParsedChunk",
              "canonicalReference": "@rainprotocol/rainlang!ParsedChunk:type"
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/types/utils.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 9
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "str",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "pattern",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            },
            {
              "parameterName": "offset",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "isOptional": true
            }
          ],
          "name": "inclusiveParse"
        },
        {
          "kind": "Variable",
          "canonicalReference": "@rainprotocol/rainlang!insertAccount:var",
          "docComment": "/**\n * Inster an account with balance to evm\n *\n * @param evm - The EVM instance\n *\n * @param address - The address to inster\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "insertAccount: "
            },
            {
              "kind": "Content",
              "text": "(evm: "
            },
            {
              "kind": "Reference",
              "text": "EVM",
              "canonicalReference": "@ethereumjs/evm!EVM:class"
            },
            {
              "kind": "Content",
              "text": ", address: "
            },
            {
              "kind": "Reference",
              "text": "Address",
              "canonicalReference": "@ethereumjs/util!Address:class"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<void>"
            }
          ],
          "fileUrlPath": "dist/types/utils.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "insertAccount",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 8
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@rainprotocol/rainlang!isAddress:var",
          "docComment": "/**\n * ethers isAddress\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "isAddress: "
            },
            {
              "kind": "Content",
              "text": "typeof "
            },
            {
              "kind": "Reference",
              "text": "utils.isAddress",
              "canonicalReference": "@ethersproject/address!isAddress:function"
            }
          ],
          "fileUrlPath": "dist/types/utils.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "isAddress",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "@rainprotocol/rainlang!isBigNumberish:function(1)",
          "docComment": "/**\n * function to check if the a value is of type BigNumberish, from EthersJS library\n *\n * @param value - the value to check\n *\n * @returns boolean\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isBigNumberish(value: "
            },
            {
              "kind": "Content",
              "text": "any"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/types/utils.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "value",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "isBigNumberish"
        },
        {
          "kind": "Variable",
          "canonicalReference": "@rainprotocol/rainlang!isBytes:var",
          "docComment": "/**\n * ethers isBytes\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "isBytes: "
            },
            {
              "kind": "Content",
              "text": "typeof "
            },
            {
              "kind": "Reference",
              "text": "utils.isBytes",
              "canonicalReference": "@ethersproject/bytes!isBytes:function"
            }
          ],
          "fileUrlPath": "dist/types/utils.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "isBytes",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@rainprotocol/rainlang!isBytesLike:var",
          "docComment": "/**\n * ethers isBytesLike\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "isBytesLike: "
            },
            {
              "kind": "Content",
              "text": "typeof "
            },
            {
              "kind": "Reference",
              "text": "utils.isBytesLike",
              "canonicalReference": "@ethersproject/bytes!isBytesLike:function"
            }
          ],
          "fileUrlPath": "dist/types/utils.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "isBytesLike",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "@rainprotocol/rainlang!isConsumableMeta:function(1)",
          "docComment": "/**\n * Method to check if a meta sequence is consumable for a dotrain\n *\n * @param amps - The meta cbor maps array\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isConsumableMeta(maps: "
            },
            {
              "kind": "Reference",
              "text": "Map",
              "canonicalReference": "!Map:interface"
            },
            {
              "kind": "Content",
              "text": "<any, any>[]"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/types/utils.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 4,
            "endIndex": 5
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "maps",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isOptional": false
            }
          ],
          "name": "isConsumableMeta"
        },
        {
          "kind": "Function",
          "canonicalReference": "@rainprotocol/rainlang!isEmptyRange:function(1)",
          "docComment": "/**\n * Checks if a range is empty\n *\n * @param range - The range to check\n *\n * @returns True if the range is empty and false if not\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isEmptyRange(range: "
            },
            {
              "kind": "Reference",
              "text": "Range",
              "canonicalReference": "@rainprotocol/rainlang!~Range"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/types/utils.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "range",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "isEmptyRange"
        },
        {
          "kind": "Variable",
          "canonicalReference": "@rainprotocol/rainlang!isHexString:var",
          "docComment": "/**\n * ethers isHexString\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "isHexString: "
            },
            {
              "kind": "Content",
              "text": "typeof "
            },
            {
              "kind": "Reference",
              "text": "utils.isHexString",
              "canonicalReference": "@ethersproject/bytes!isHexString:function"
            }
          ],
          "fileUrlPath": "dist/types/utils.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "isHexString",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "@rainprotocol/rainlang!isInRange:function(1)",
          "docComment": "/**\n * Checks if a position is within a range\n *\n * @param range - The range to check\n *\n * @param position - The position to check\n *\n * @returns True if the position is in range and false if not\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isInRange(range: "
            },
            {
              "kind": "Reference",
              "text": "Range",
              "canonicalReference": "@rainprotocol/rainlang!~Range"
            },
            {
              "kind": "Content",
              "text": ", position: "
            },
            {
              "kind": "Reference",
              "text": "Position",
              "canonicalReference": "@rainprotocol/rainlang!~Position"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/types/utils.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "range",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "position",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "name": "isInRange"
        },
        {
          "kind": "Variable",
          "canonicalReference": "@rainprotocol/rainlang!keccak256:var",
          "docComment": "/**\n * ethers keccak256\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "keccak256: "
            },
            {
              "kind": "Content",
              "text": "typeof "
            },
            {
              "kind": "Reference",
              "text": "utils.keccak256",
              "canonicalReference": "@ethersproject/keccak256!keccak256:function"
            }
          ],
          "fileUrlPath": "dist/types/utils.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "keccak256",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@rainprotocol/rainlang!LanguageServiceParams:interface",
          "docComment": "/**\n * Parameters for initiating Language Services\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface LanguageServiceParams "
            }
          ],
          "fileUrlPath": "dist/types/languageTypes.d.ts",
          "releaseTag": "Public",
          "name": "LanguageServiceParams",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@rainprotocol/rainlang!LanguageServiceParams#clientCapabilities:member",
              "docComment": "/**\n * Describes the LSP capabilities the client supports.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "clientCapabilities?: "
                },
                {
                  "kind": "Reference",
                  "text": "ClientCapabilities",
                  "canonicalReference": "@rainprotocol/rainlang!ClientCapabilities:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "clientCapabilities",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@rainprotocol/rainlang!LanguageServiceParams#metaStore:member",
              "docComment": "/**\n * Object that keeps cache of metas\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "metaStore?: "
                },
                {
                  "kind": "Reference",
                  "text": "Meta.Store",
                  "canonicalReference": "@rainprotocol/meta!Meta.Store:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "metaStore",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@rainprotocol/rainlang!LanguageServiceParams#noMetaSearch:member",
              "docComment": "/**\n * If should not search for metas (for lang services except diagnostics)\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "noMetaSearch?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "noMetaSearch",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Function",
          "canonicalReference": "@rainprotocol/rainlang!mapToRecord:function(1)",
          "docComment": "/**\n * Conver a Map to a equivalent Record (a key/value pair object). Map keys must be of type acceptable by Record constructor, which are string, number or symbol.\n *\n * @param map - The Map to conver to Record\n *\n * @param properties - (optional) properties to pick from the second item of the Map's elements.\n *\n * @returns a new Record from Map\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function mapToRecord<K extends "
            },
            {
              "kind": "Content",
              "text": "string | number | symbol"
            },
            {
              "kind": "Content",
              "text": ">(map: "
            },
            {
              "kind": "Reference",
              "text": "Map",
              "canonicalReference": "!Map:interface"
            },
            {
              "kind": "Content",
              "text": "<K, any>"
            },
            {
              "kind": "Content",
              "text": ", properties?: "
            },
            {
              "kind": "Content",
              "text": "string[]"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Record",
              "canonicalReference": "!Record:type"
            },
            {
              "kind": "Content",
              "text": "<K, any>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/types/utils.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 8,
            "endIndex": 10
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "map",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "isOptional": false
            },
            {
              "parameterName": "properties",
              "parameterTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              },
              "isOptional": true
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "K",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "mapToRecord"
        },
        {
          "kind": "Function",
          "canonicalReference": "@rainprotocol/rainlang!matchRange:function(1)",
          "docComment": "/**\n * Checks if 2 ranges match exactly together\n *\n * @param range1 - The first range\n *\n * @param range2 - The second range\n *\n * @returns True if the ranges match and false if they don't\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function matchRange(range1: "
            },
            {
              "kind": "Reference",
              "text": "Range",
              "canonicalReference": "@rainprotocol/rainlang!~Range"
            },
            {
              "kind": "Content",
              "text": ", range2: "
            },
            {
              "kind": "Reference",
              "text": "Range",
              "canonicalReference": "@rainprotocol/rainlang!~Range"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/types/utils.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "range1",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "range2",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "name": "matchRange"
        },
        {
          "kind": "Variable",
          "canonicalReference": "@rainprotocol/rainlang!NAMESPACE_PATTERN:var",
          "docComment": "/**\n * RainDocument Namespace pattern\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "NAMESPACE_PATTERN: "
            },
            {
              "kind": "Reference",
              "text": "RegExp",
              "canonicalReference": "!RegExp:interface"
            }
          ],
          "fileUrlPath": "dist/types/languageTypes.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "NAMESPACE_PATTERN",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@rainprotocol/rainlang!NATIVE_PARSER_ABI:var",
          "docComment": "/**\n * Native Parser ABI (ExpressionDeployerV2 ABI)\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "NATIVE_PARSER_ABI: "
            },
            {
              "kind": "Content",
              "text": "readonly [\"constructor(tuple(address interpreter, address store, bytes meta) config)\", \"event ExpressionAddress(address sender, address expression)\", \"event NewExpression(address sender, bytes bytecode, uint256[] constants, uint256[] minOutputs)\", \"event DISpair(address sender, address deployer, address interpreter, address store, bytes opMeta)\", \"error MaxSources()\", \"error WriteError()\", \"error ParenOverflow()\", \"error StackOverflow()\", \"error DanglingSource()\", \"error StackUnderflow()\", \"error ParserOutOfBounds()\", \"error WordSize(string word)\", \"error DuplicateFingerprint()\", \"error UnknownWord(uint256 offset)\", \"error ExcessLHSItems(uint256 offset)\", \"error ExcessRHSItems(uint256 offset)\", \"error ExpectedOperand(uint256 offset)\", \"error OperandOverflow(uint256 offset)\", \"error TruncatedHeader(bytes bytecode)\", \"error TruncatedSource(bytes bytecode)\", \"error UnclosedOperand(uint256 offset)\", \"error MissingFinalSemi(uint256 offset)\", \"error ExpectedLeftParen(uint256 offset)\", \"error UnclosedLeftParen(uint256 offset)\", \"error UnexpectedComment(uint256 offset)\", \"error UnexpectedLHSChar(uint256 offset)\", \"error UnexpectedOperand(uint256 offset)\", \"error UnexpectedRHSChar(uint256 offset)\", \"error UnexpectedSources(bytes bytecode)\", \"error ZeroLengthDecimal(uint256 offset)\", \"error HexLiteralOverflow(uint256 offset)\", \"error NotAcceptingInputs(uint256 offset)\", \"error MalformedHexLiteral(uint256 offset)\", \"error OddLengthHexLiteral(uint256 offset)\", \"error UnexpectedRightParen(uint256 offset)\", \"error ZeroLengthHexLiteral(uint256 offset)\", \"error DuplicateLHSItem(uint256 errorOffset)\", \"error MalformedCommentStart(uint256 offset)\", \"error DecimalLiteralOverflow(uint256 offset)\", \"error TruncatedHeaderOffsets(bytes bytecode)\", \"error UnsupportedLiteralType(uint256 offset)\", \"error MalformedExponentDigits(uint256 offset)\", \"error UnexpectedPointers(bytes actualPointers)\", \"error UnexpectedTrailingOffsetBytes(bytes bytecode)\", \"error AuthoringMetaHashMismatch(bytes32 expected, bytes32 actual)\", \"error SourceIndexOutOfBounds(bytes bytecode, uint256 sourceIndex)\", \"error CallOutputsExceedSource(uint256 sourceOutputs, uint256 outputs)\", \"error StackSizingsNotMonotonic(bytes bytecode, uint256 relativeOffset)\", \"error StackOutputsMismatch(uint256 stackIndex, uint256 bytecodeOutputs)\", \"error BadDynamicLength(uint256 dynamicLength, uint256 standardOpsLength)\", \"error EntrypointNonZeroInput(uint256 entrypointIndex, uint256 inputsLength)\", \"error EntrypointMissing(uint256 expectedEntrypoints, uint256 actualEntrypoints)\", \"error StackAllocationMismatch(uint256 stackMaxIndex, uint256 bytecodeAllocation)\", \"error StackUnderflow(uint256 opIndex, uint256 stackIndex, uint256 calculatedInputs)\", \"error OutOfBoundsStackRead(uint256 opIndex, uint256 stackTopIndex, uint256 stackRead)\", \"error BadOpInputsLength(uint256 opIndex, uint256 calculatedInputs, uint256 bytecodeInputs)\", \"error StackUnderflowHighwater(uint256 opIndex, uint256 stackIndex, uint256 stackHighwater)\", \"error UnexpectedStoreBytecodeHash(bytes32 expectedBytecodeHash, bytes32 actualBytecodeHash)\", \"error OutOfBoundsConstantRead(uint256 opIndex, uint256 constantsLength, uint256 constantRead)\", \"error EntrypointMinOutputs(uint256 entrypointIndex, uint256 outputsLength, uint256 minOutputs)\", \"error UnexpectedInterpreterBytecodeHash(bytes32 expectedBytecodeHash, bytes32 actualBytecodeHash)\", \"error UnexpectedConstructionMetaHash(bytes32 expectedConstructionMetaHash, bytes32 actualConstructionMetaHash)\", \"function iStore() view returns (address)\", \"function parseMeta() pure returns (bytes)\", \"function iInterpreter() view returns (address)\", \"function authoringMetaHash() pure returns (bytes32)\", \"function integrityFunctionPointers() view returns (bytes)\", \"function parse(bytes data) pure returns (bytes, uint256[])\", \"function buildParseMeta(bytes authoringMeta) pure returns (bytes)\", \"function supportsInterface(bytes4 interfaceId_) view returns (bool)\", \"function integrityCheck(bytes bytecode, uint256[] constants, uint256[] minOutputs) view\", \"function deployExpression(bytes bytecode, uint256[] constants, uint256[] minOutputs) returns (address, address, address)\"]"
            }
          ],
          "fileUrlPath": "dist/types/languageTypes.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "NATIVE_PARSER_ABI",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@rainprotocol/rainlang!NATIVE_PARSER_FULL_SIGHASH:var",
          "docComment": "/**\n * Full sighash of all native parser's selectors\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "NATIVE_PARSER_FULL_SIGHASH: "
            },
            {
              "kind": "Content",
              "text": "{\n    readonly 3463334474: \"event ExpressionAddress(address sender, address expression)\";\n    readonly 1246295382: \"event NewExpression(address sender, bytes bytecode, uint256[] constants, uint256[] minOutputs)\";\n    readonly 394826522: \"event DISpair(address sender, address deployer, address interpreter, address store, bytes opMeta)\";\n    readonly 2818975809: \"error MaxSources()\";\n    readonly 148155318: \"error WriteError()\";\n    readonly 1647506137: \"error ParenOverflow()\";\n    readonly 2723985969: \"error StackOverflow()\";\n    readonly 2240753103: \"error DanglingSource()\";\n    readonly 73866496: \"error StackUnderflow()\";\n    readonly 2102812150: \"error ParserOutOfBounds()\";\n    readonly 3833587895: \"error WordSize(string word)\";\n    readonly 1495874641: \"error DuplicateFingerprint()\";\n    readonly 2176665819: \"error UnknownWord(uint256 offset)\";\n    readonly 1125551720: \"error ExcessLHSItems(uint256 offset)\";\n    readonly 2028939138: \"error ExcessRHSItems(uint256 offset)\";\n    readonly 604143044: \"error ExpectedOperand(uint256 offset)\";\n    readonly 1954596740: \"error OperandOverflow(uint256 offset)\";\n    readonly 3783254: \"error TruncatedHeader(bytes bytecode)\";\n    readonly 4223140474: \"error TruncatedSource(bytes bytecode)\";\n    readonly 1915540042: \"error UnclosedOperand(uint256 offset)\";\n    readonly 4033828047: \"error MissingFinalSemi(uint256 offset)\";\n    readonly 599115498: \"error ExpectedLeftParen(uint256 offset)\";\n    readonly 1873878236: \"error UnclosedLeftParen(uint256 offset)\";\n    readonly 3987541080: \"error UnexpectedComment(uint256 offset)\";\n    readonly 1428202775: \"error UnexpectedLHSChar(uint256 offset)\";\n    readonly 4162939989: \"error UnexpectedOperand(uint256 offset)\";\n    readonly 1317027318: \"error UnexpectedRHSChar(uint256 offset)\";\n    readonly 3490962013: \"error UnexpectedSources(bytes bytecode)\";\n    readonly 4200956542: \"error ZeroLengthDecimal(uint256 offset)\";\n    readonly 4281293129: \"error HexLiteralOverflow(uint256 offset)\";\n    readonly 2870820519: \"error NotAcceptingInputs(uint256 offset)\";\n    readonly 1777460198: \"error MalformedHexLiteral(uint256 offset)\";\n    readonly 3614284631: \"error OddLengthHexLiteral(uint256 offset)\";\n    readonly 2141041986: \"error UnexpectedRightParen(uint256 offset)\";\n    readonly 3344749833: \"error ZeroLengthHexLiteral(uint256 offset)\";\n    readonly 1407647418: \"error DuplicateLHSItem(uint256 errorOffset)\";\n    readonly 1044846236: \"error MalformedCommentStart(uint256 offset)\";\n    readonly 2401984509: \"error DecimalLiteralOverflow(uint256 offset)\";\n    readonly 401914974: \"error TruncatedHeaderOffsets(bytes bytecode)\";\n    readonly 2967791027: \"error UnsupportedLiteralType(uint256 offset)\";\n    readonly 20654762: \"error MalformedExponentDigits(uint256 offset)\";\n    readonly 2553668610: \"error UnexpectedPointers(bytes actualPointers)\";\n    readonly 3731337882: \"error UnexpectedTrailingOffsetBytes(bytes bytecode)\";\n    readonly 650907628: \"error AuthoringMetaHashMismatch(bytes32 expected, bytes32 actual)\";\n    readonly 810064605: \"error SourceIndexOutOfBounds(bytes bytecode, uint256 sourceIndex)\";\n    readonly 4279464200: \"error CallOutputsExceedSource(uint256 sourceOutputs, uint256 outputs)\";\n    readonly 3941883727: \"error StackSizingsNotMonotonic(bytes bytecode, uint256 relativeOffset)\";\n    readonly 1183445171: \"error StackOutputsMismatch(uint256 stackIndex, uint256 bytecodeOutputs)\";\n    readonly 3367332097: \"error BadDynamicLength(uint256 dynamicLength, uint256 standardOpsLength)\";\n    readonly 4002222209: \"error EntrypointNonZeroInput(uint256 entrypointIndex, uint256 inputsLength)\";\n    readonly 4254997236: \"error EntrypointMissing(uint256 expectedEntrypoints, uint256 actualEntrypoints)\";\n    readonly 1302075612: \"error StackAllocationMismatch(uint256 stackMaxIndex, uint256 bytecodeAllocation)\";\n    readonly 749431807: \"error StackUnderflow(uint256 opIndex, uint256 stackIndex, uint256 calculatedInputs)\";\n    readonly 3936448307: \"error OutOfBoundsStackRead(uint256 opIndex, uint256 stackTopIndex, uint256 stackRead)\";\n    readonly 3723845745: \"error BadOpInputsLength(uint256 opIndex, uint256 calculatedInputs, uint256 bytecodeInputs)\";\n    readonly 465939215: \"error StackUnderflowHighwater(uint256 opIndex, uint256 stackIndex, uint256 stackHighwater)\";\n    readonly 1214343835: \"error UnexpectedStoreBytecodeHash(bytes32 expectedBytecodeHash, bytes32 actualBytecodeHash)\";\n    readonly 3950548052: \"error OutOfBoundsConstantRead(uint256 opIndex, uint256 constantsLength, uint256 constantRead)\";\n    readonly 4158480799: \"error EntrypointMinOutputs(uint256 entrypointIndex, uint256 outputsLength, uint256 minOutputs)\";\n    readonly 528747054: \"error UnexpectedInterpreterBytecodeHash(bytes32 expectedBytecodeHash, bytes32 actualBytecodeHash)\";\n    readonly 1491565011: \"error UnexpectedConstructionMetaHash(bytes32 expectedConstructionMetaHash, bytes32 actualConstructionMetaHash)\";\n    readonly 3247711164: \"function iStore() view returns (address)\";\n    readonly 4290926340: \"function parseMeta() pure returns (bytes)\";\n    readonly 4040154423: \"function iInterpreter() view returns (address)\";\n    readonly 3066500954: \"function authoringMetaHash() pure returns (bytes32)\";\n    readonly 2371962257: \"function integrityFunctionPointers() view returns (bytes)\";\n    readonly 4206102650: \"function parse(bytes data) pure returns (bytes, uint256[])\";\n    readonly 2785066250: \"function buildParseMeta(bytes authoringMeta) pure returns (bytes)\";\n    readonly 33540519: \"function supportsInterface(bytes4 interfaceId_) view returns (bool)\";\n    readonly 3417821555: \"function integrityCheck(bytes bytecode, uint256[] constants, uint256[] minOutputs) view\";\n    readonly 832990053: \"function deployExpression(bytes bytecode, uint256[] constants, uint256[] minOutputs) returns (address, address, address)\";\n}"
            }
          ],
          "fileUrlPath": "dist/types/languageTypes.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "NATIVE_PARSER_FULL_SIGHASH",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@rainprotocol/rainlang!NATIVE_PARSER_MINIMAL_SIGHASH:var",
          "docComment": "/**\n * Minimal sighash of all native parser's selectors\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "NATIVE_PARSER_MINIMAL_SIGHASH: "
            },
            {
              "kind": "Content",
              "text": "{\n    readonly 3463334474: \"ExpressionAddress(address,address)\";\n    readonly 1246295382: \"NewExpression(address,bytes,uint256[],uint256[])\";\n    readonly 394826522: \"DISpair(address,address,address,address,bytes)\";\n    readonly 2818975809: \"MaxSources()\";\n    readonly 148155318: \"WriteError()\";\n    readonly 1647506137: \"ParenOverflow()\";\n    readonly 2723985969: \"StackOverflow()\";\n    readonly 2240753103: \"DanglingSource()\";\n    readonly 73866496: \"StackUnderflow()\";\n    readonly 2102812150: \"ParserOutOfBounds()\";\n    readonly 3833587895: \"WordSize(string)\";\n    readonly 1495874641: \"DuplicateFingerprint()\";\n    readonly 2176665819: \"UnknownWord(uint256)\";\n    readonly 1125551720: \"ExcessLHSItems(uint256)\";\n    readonly 2028939138: \"ExcessRHSItems(uint256)\";\n    readonly 604143044: \"ExpectedOperand(uint256)\";\n    readonly 1954596740: \"OperandOverflow(uint256)\";\n    readonly 3783254: \"TruncatedHeader(bytes)\";\n    readonly 4223140474: \"TruncatedSource(bytes)\";\n    readonly 1915540042: \"UnclosedOperand(uint256)\";\n    readonly 4033828047: \"MissingFinalSemi(uint256)\";\n    readonly 599115498: \"ExpectedLeftParen(uint256)\";\n    readonly 1873878236: \"UnclosedLeftParen(uint256)\";\n    readonly 3987541080: \"UnexpectedComment(uint256)\";\n    readonly 1428202775: \"UnexpectedLHSChar(uint256)\";\n    readonly 4162939989: \"UnexpectedOperand(uint256)\";\n    readonly 1317027318: \"UnexpectedRHSChar(uint256)\";\n    readonly 3490962013: \"UnexpectedSources(bytes)\";\n    readonly 4200956542: \"ZeroLengthDecimal(uint256)\";\n    readonly 4281293129: \"HexLiteralOverflow(uint256)\";\n    readonly 2870820519: \"NotAcceptingInputs(uint256)\";\n    readonly 1777460198: \"MalformedHexLiteral(uint256)\";\n    readonly 3614284631: \"OddLengthHexLiteral(uint256)\";\n    readonly 2141041986: \"UnexpectedRightParen(uint256)\";\n    readonly 3344749833: \"ZeroLengthHexLiteral(uint256)\";\n    readonly 1407647418: \"DuplicateLHSItem(uint256)\";\n    readonly 1044846236: \"MalformedCommentStart(uint256)\";\n    readonly 2401984509: \"DecimalLiteralOverflow(uint256)\";\n    readonly 401914974: \"TruncatedHeaderOffsets(bytes)\";\n    readonly 2967791027: \"UnsupportedLiteralType(uint256)\";\n    readonly 20654762: \"MalformedExponentDigits(uint256)\";\n    readonly 2553668610: \"UnexpectedPointers(bytes)\";\n    readonly 3731337882: \"UnexpectedTrailingOffsetBytes(bytes)\";\n    readonly 650907628: \"AuthoringMetaHashMismatch(bytes32,bytes32)\";\n    readonly 810064605: \"SourceIndexOutOfBounds(bytes,uint256)\";\n    readonly 4279464200: \"CallOutputsExceedSource(uint256,uint256)\";\n    readonly 3941883727: \"StackSizingsNotMonotonic(bytes,uint256)\";\n    readonly 1183445171: \"StackOutputsMismatch(uint256,uint256)\";\n    readonly 3367332097: \"BadDynamicLength(uint256,uint256)\";\n    readonly 4002222209: \"EntrypointNonZeroInput(uint256,uint256)\";\n    readonly 4254997236: \"EntrypointMissing(uint256,uint256)\";\n    readonly 1302075612: \"StackAllocationMismatch(uint256,uint256)\";\n    readonly 749431807: \"StackUnderflow(uint256,uint256,uint256)\";\n    readonly 3936448307: \"OutOfBoundsStackRead(uint256,uint256,uint256)\";\n    readonly 3723845745: \"BadOpInputsLength(uint256,uint256,uint256)\";\n    readonly 465939215: \"StackUnderflowHighwater(uint256,uint256,uint256)\";\n    readonly 1214343835: \"UnexpectedStoreBytecodeHash(bytes32,bytes32)\";\n    readonly 3950548052: \"OutOfBoundsConstantRead(uint256,uint256,uint256)\";\n    readonly 4158480799: \"EntrypointMinOutputs(uint256,uint256,uint256)\";\n    readonly 528747054: \"UnexpectedInterpreterBytecodeHash(bytes32,bytes32)\";\n    readonly 1491565011: \"UnexpectedConstructionMetaHash(bytes32,bytes32)\";\n    readonly 3247711164: \"iStore()\";\n    readonly 4290926340: \"parseMeta()\";\n    readonly 4040154423: \"iInterpreter()\";\n    readonly 3066500954: \"authoringMetaHash()\";\n    readonly 2371962257: \"integrityFunctionPointers()\";\n    readonly 4206102650: \"parse(bytes)\";\n    readonly 2785066250: \"buildParseMeta(bytes)\";\n    readonly 33540519: \"supportsInterface(bytes4)\";\n    readonly 3417821555: \"integrityCheck(bytes,uint256[],uint256[])\";\n    readonly 832990053: \"deployExpression(bytes,uint256[],uint256[])\";\n}"
            }
          ],
          "fileUrlPath": "dist/types/languageTypes.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "NATIVE_PARSER_MINIMAL_SIGHASH",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@rainprotocol/rainlang!NP_SGS:var",
          "docComment": "/**\n * Native Parser known subgraph endpoints\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "NP_SGS: "
            },
            {
              "kind": "Content",
              "text": "readonly [\"https://api.thegraph.com/subgraphs/name/rainprotocol/interpreter-registry-np-eth\", \"https://api.thegraph.com/subgraphs/name/rainprotocol/interpreter-registry-np-matic\", \"https://api.thegraph.com/subgraphs/name/rainprotocol/interpreter-registry-np\"]"
            }
          ],
          "fileUrlPath": "dist/types/languageTypes.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "NP_SGS",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "@rainprotocol/rainlang!npParse:function(1)",
          "docComment": "/**\n * Parse a text using NP bytecode\n *\n * @param text - the text to parse\n *\n * @param deployedBytecode - The NP contract deployed bytecode\n *\n * @param entrypoints - The number of entrypoints\n *\n * @param options - options\n *\n * @returns A Promise that resolves with ExpressionConfig or rejects with NPError\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function npParse(text: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", deployedBytecode: "
            },
            {
              "kind": "Reference",
              "text": "BytesLike",
              "canonicalReference": "@ethersproject/bytes!BytesLike:type"
            },
            {
              "kind": "Content",
              "text": ", entrypoints: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ", options?: "
            },
            {
              "kind": "Content",
              "text": "{\n    abi?: any;\n    evm?: "
            },
            {
              "kind": "Reference",
              "text": "EVM",
              "canonicalReference": "@ethereumjs/evm!EVM:class"
            },
            {
              "kind": "Content",
              "text": ";\n    minOutputs?: number[];\n}"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ExpressionConfig",
              "canonicalReference": "@rainprotocol/rainlang!ExpressionConfig:type"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/types/parser/compiler.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 11,
            "endIndex": 15
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "text",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "deployedBytecode",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            },
            {
              "parameterName": "entrypoints",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "isOptional": false
            },
            {
              "parameterName": "options",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 10
              },
              "isOptional": true
            }
          ],
          "name": "npParse"
        },
        {
          "kind": "Variable",
          "canonicalReference": "@rainprotocol/rainlang!NUMERIC_PATTERN:var",
          "docComment": "/**\n * Rainlang numeric pattern\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "NUMERIC_PATTERN: "
            },
            {
              "kind": "Reference",
              "text": "RegExp",
              "canonicalReference": "!RegExp:interface"
            }
          ],
          "fileUrlPath": "dist/types/languageTypes.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "NUMERIC_PATTERN",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@rainprotocol/rainlang!paddedUInt128:var",
          "docComment": "/**\n * Utility function to produce 128 bits size hexString\n *\n * @param value - the value to convert into a 128bit size hexString\n *\n * @returns a 32 character hexString (without 0x prefix)\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "paddedUInt128: "
            },
            {
              "kind": "Content",
              "text": "(value: "
            },
            {
              "kind": "Reference",
              "text": "BigNumberish",
              "canonicalReference": "@ethersproject/bignumber!BigNumberish:type"
            },
            {
              "kind": "Content",
              "text": ") => string"
            }
          ],
          "fileUrlPath": "dist/types/utils.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "paddedUInt128",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@rainprotocol/rainlang!paddedUInt160:var",
          "docComment": "/**\n * Utility function that transforms a BigNumberish to an ether address (40 char length hexString)\n *\n * @param address - value as bignumberish\n *\n * @returns hexadecimal string as an ether address (40 char length hexString)\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "paddedUInt160: "
            },
            {
              "kind": "Content",
              "text": "(address: "
            },
            {
              "kind": "Reference",
              "text": "BigNumberish",
              "canonicalReference": "@ethersproject/bignumber!BigNumberish:type"
            },
            {
              "kind": "Content",
              "text": ") => string"
            }
          ],
          "fileUrlPath": "dist/types/utils.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "paddedUInt160",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@rainprotocol/rainlang!paddedUInt256:var",
          "docComment": "/**\n * Utility function that transforms a BigNumberish from the output of the ITierV2 contract report\n *\n * @param report - report as bignumberish from the ITierV2 contract\n *\n * @returns hexadecimal string of the report already padded (64 char hexString)\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "paddedUInt256: "
            },
            {
              "kind": "Content",
              "text": "(report: "
            },
            {
              "kind": "Reference",
              "text": "BigNumberish",
              "canonicalReference": "@ethersproject/bignumber!BigNumberish:type"
            },
            {
              "kind": "Content",
              "text": ") => string"
            }
          ],
          "fileUrlPath": "dist/types/utils.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "paddedUInt256",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@rainprotocol/rainlang!paddedUInt32:var",
          "docComment": "/**\n * Utility function to produce 32 bits size hexString\n *\n * @param value - the value to convert into a 32bit size hexString\n *\n * @returns a 8 char hexString (without 0x prefix)\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "paddedUInt32: "
            },
            {
              "kind": "Content",
              "text": "(value: "
            },
            {
              "kind": "Reference",
              "text": "BigNumberish",
              "canonicalReference": "@ethersproject/bignumber!BigNumberish:type"
            },
            {
              "kind": "Content",
              "text": ") => string"
            }
          ],
          "fileUrlPath": "dist/types/utils.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "paddedUInt32",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@rainprotocol/rainlang!paddedUInt64:var",
          "docComment": "/**\n * Utility function to produce 64 bits size hexString\n *\n * @param value - the value to convert into a 64bit size hexString\n *\n * @returns a 16 character hexString (without 0x prefix)\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "paddedUInt64: "
            },
            {
              "kind": "Content",
              "text": "(value: "
            },
            {
              "kind": "Reference",
              "text": "BigNumberish",
              "canonicalReference": "@ethersproject/bignumber!BigNumberish:type"
            },
            {
              "kind": "Content",
              "text": ") => string"
            }
          ],
          "fileUrlPath": "dist/types/utils.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "paddedUInt64",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "Namespace",
          "canonicalReference": "@rainprotocol/rainlang!ParsedChunk:namespace",
          "docComment": "/**\n * The namespace provides function to type checking\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare namespace ParsedChunk "
            }
          ],
          "fileUrlPath": "dist/types/utils.d.ts",
          "releaseTag": "Public",
          "name": "ParsedChunk",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Function",
              "canonicalReference": "@rainprotocol/rainlang!ParsedChunk.is:function(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function is(value: "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "value",
                  "canonicalReference": "@rainprotocol/rainlang!~value"
                },
                {
                  "kind": "Content",
                  "text": " is "
                },
                {
                  "kind": "Reference",
                  "text": "ParsedChunk",
                  "canonicalReference": "@rainprotocol/rainlang!ParsedChunk:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "is"
            }
          ]
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@rainprotocol/rainlang!ParsedChunk:type",
          "docComment": "/**\n * Type for result of matches found in a string\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type ParsedChunk = "
            },
            {
              "kind": "Content",
              "text": "[string, [number, number]]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/types/utils.d.ts",
          "releaseTag": "Public",
          "name": "ParsedChunk",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@rainprotocol/rainlang!parseUnits:var",
          "docComment": "/**\n * ethers parseUnits\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "parseUnits: "
            },
            {
              "kind": "Content",
              "text": "typeof "
            },
            {
              "kind": "Reference",
              "text": "utils.parseUnits",
              "canonicalReference": "@ethersproject/units!parseUnits:function"
            }
          ],
          "fileUrlPath": "dist/types/utils.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "parseUnits",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          }
        },
        {
          "kind": "Class",
          "canonicalReference": "@rainprotocol/rainlang!RainDocument:class",
          "docComment": "/**\n * RainDocument aka dotrain is a class object that parses a text to provides data and functionalities in order to be used later on to provide Rain Language Services or in RainDocument compiler to get the ExpressionConfig (deployable bytes). It uses Rain parser under the hood which does all the heavy work.\n *\n * @example\n * ```typescript\n * // to import\n * import { RainDocument } from 'rainlang';\n *\n * // to create a new instance of the RainDocument object which parses right after instantiation\n * const myRainDocument = await RainDocument.create(text)\n *\n * // to get the problems\n * const problems = myRainDocument.getAllProblems()\n *\n * // to update the text\n * await myRainDocument.updateText(newText)\n * ```\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class RainDocument "
            }
          ],
          "fileUrlPath": "dist/types/parser/rainDocument.d.ts",
          "releaseTag": "Public",
          "isAbstract": false,
          "name": "RainDocument",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@rainprotocol/rainlang!RainDocument:constructor(1)",
              "docComment": "/**\n * Constructs a new RainDocument instance, should not be used for instantiating, use \"creat()\" instead\n *\n * @param textDocument - TextDocument\n *\n * @param metaStore - (optional) Meta.Store object\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(textDocument: "
                },
                {
                  "kind": "Reference",
                  "text": "TextDocument",
                  "canonicalReference": "@rainprotocol/rainlang!~TextDocument"
                },
                {
                  "kind": "Content",
                  "text": ", metaStore?: "
                },
                {
                  "kind": "Reference",
                  "text": "Meta.Store",
                  "canonicalReference": "@rainprotocol/meta!Meta.Store:class"
                },
                {
                  "kind": "Content",
                  "text": ", importDepth?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "textDocument",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "metaStore",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": true
                },
                {
                  "parameterName": "importDepth",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": true
                }
              ]
            },
            {
              "kind": "Property",
              "canonicalReference": "@rainprotocol/rainlang!RainDocument#authoringMeta:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "authoringMeta: "
                },
                {
                  "kind": "Reference",
                  "text": "Meta.Authoring",
                  "canonicalReference": "@rainprotocol/meta!Meta.Authoring"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "authoringMeta",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@rainprotocol/rainlang!RainDocument#authoringMetaPath:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "authoringMetaPath: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "authoringMetaPath",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@rainprotocol/rainlang!RainDocument#bindings:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "bindings: "
                },
                {
                  "kind": "Reference",
                  "text": "AST.Binding",
                  "canonicalReference": "@rainprotocol/rainlang!AST.Binding:type"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "bindings",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@rainprotocol/rainlang!RainDocument#bytecode:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "bytecode: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "bytecode",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@rainprotocol/rainlang!RainDocument#comments:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "comments: "
                },
                {
                  "kind": "Reference",
                  "text": "AST.Comment",
                  "canonicalReference": "@rainprotocol/rainlang!AST.Comment:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "comments",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@rainprotocol/rainlang!RainDocument#constants:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly constants: "
                },
                {
                  "kind": "Reference",
                  "text": "Record",
                  "canonicalReference": "!Record:type"
                },
                {
                  "kind": "Content",
                  "text": "<string, string>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "constants",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@rainprotocol/rainlang!RainDocument.create:member(1)",
              "docComment": "/**\n * Creates a new RainDocument object instance with a TextDocument\n *\n * @param textDocument - The text document\n *\n * @param metaStore - (optional) The initial Meta.Store object\n *\n * @returns A new RainDocument instance\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static create(textDocument: "
                },
                {
                  "kind": "Reference",
                  "text": "TextDocument",
                  "canonicalReference": "@rainprotocol/rainlang!~TextDocument"
                },
                {
                  "kind": "Content",
                  "text": ", metaStore?: "
                },
                {
                  "kind": "Reference",
                  "text": "Meta.Store",
                  "canonicalReference": "@rainprotocol/meta!Meta.Store:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "RainDocument",
                  "canonicalReference": "@rainprotocol/rainlang!RainDocument:class"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "textDocument",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "metaStore",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "create"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rainprotocol/rainlang!RainDocument.create:member(2)",
              "docComment": "/**\n * Creates a new RainDocument object instance from a text string\n *\n * @param text - The text string\n *\n * @param metaStore - (optional) The initial Meta.Store object\n *\n * @param uri - (optional) The URI of the text, URI is the unique identifier of a TextDocument\n *\n * @param version - (optional) The version of the text\n *\n * @returns A new RainDocument instance\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static create(text: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", metaStore?: "
                },
                {
                  "kind": "Reference",
                  "text": "Meta.Store",
                  "canonicalReference": "@rainprotocol/meta!Meta.Store:class"
                },
                {
                  "kind": "Content",
                  "text": ", uri?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", version?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "RainDocument",
                  "canonicalReference": "@rainprotocol/rainlang!RainDocument:class"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 13
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 2,
              "parameters": [
                {
                  "parameterName": "text",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "metaStore",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": true
                },
                {
                  "parameterName": "uri",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": true
                },
                {
                  "parameterName": "version",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "create"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rainprotocol/rainlang!RainDocument#getAllProblems:member(1)",
              "docComment": "/**\n * Get all problems of this RainDocument instance\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getAllProblems(): "
                },
                {
                  "kind": "Reference",
                  "text": "AST.Problem",
                  "canonicalReference": "@rainprotocol/rainlang!AST.Problem:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "isAbstract": false,
              "name": "getAllProblems"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rainprotocol/rainlang!RainDocument#getBindingsProblems:member(1)",
              "docComment": "/**\n * Get the expression problems of this RainDocument instance\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getBindingsProblems(): "
                },
                {
                  "kind": "Reference",
                  "text": "AST.Problem",
                  "canonicalReference": "@rainprotocol/rainlang!AST.Problem:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "isAbstract": false,
              "name": "getBindingsProblems"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rainprotocol/rainlang!RainDocument#getText:member(1)",
              "docComment": "/**\n * Get the current text of this RainDocument instance\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getText(): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "isAbstract": false,
              "name": "getText"
            },
            {
              "kind": "Property",
              "canonicalReference": "@rainprotocol/rainlang!RainDocument#imports:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "imports: "
                },
                {
                  "kind": "Reference",
                  "text": "AST.Import",
                  "canonicalReference": "@rainprotocol/rainlang!AST.Import:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "imports",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@rainprotocol/rainlang!RainDocument#metaStore:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "metaStore: "
                },
                {
                  "kind": "Reference",
                  "text": "Meta.Store",
                  "canonicalReference": "@rainprotocol/meta!Meta.Store:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "metaStore",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@rainprotocol/rainlang!RainDocument#namespace:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "namespace: "
                },
                {
                  "kind": "Reference",
                  "text": "AST.Namespace",
                  "canonicalReference": "@rainprotocol/rainlang!AST.Namespace:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "namespace",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@rainprotocol/rainlang!RainDocument#parse:member(1)",
              "docComment": "/**\n * Parses this instance of RainDocument\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "parse(): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "isAbstract": false,
              "name": "parse"
            },
            {
              "kind": "Property",
              "canonicalReference": "@rainprotocol/rainlang!RainDocument#problems:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "problems: "
                },
                {
                  "kind": "Reference",
                  "text": "AST.Problem",
                  "canonicalReference": "@rainprotocol/rainlang!AST.Problem:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "problems",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@rainprotocol/rainlang!RainDocument#runtimeError:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "runtimeError: "
                },
                {
                  "kind": "Reference",
                  "text": "Error",
                  "canonicalReference": "!Error:interface"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "runtimeError",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@rainprotocol/rainlang!RainDocument#textDocument:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "textDocument: "
                },
                {
                  "kind": "Reference",
                  "text": "TextDocument",
                  "canonicalReference": "@rainprotocol/rainlang!~TextDocument"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "textDocument",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@rainprotocol/rainlang!RainDocument#updateText:member(1)",
              "docComment": "/**\n * Updates the TextDocument of this RainDocument instance with new text\n *\n * @param newText - The new text\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "updateText(newText: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "newText",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "updateText"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rainprotocol/rainlang!RainDocument#updateText:member(2)",
              "docComment": "/**\n * Updates the TextDocument of this RainDocument instance\n *\n * @param newTextDocument - The new TextDocument\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "updateText(newTextDocument: "
                },
                {
                  "kind": "Reference",
                  "text": "TextDocument",
                  "canonicalReference": "@rainprotocol/rainlang!~TextDocument"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 2,
              "parameters": [
                {
                  "parameterName": "newTextDocument",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "updateText"
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@rainprotocol/rainlang!Rainlang:class",
          "docComment": "/**\n * Rainlang class is a the main workhorse that does all the heavy work of parsing a document, written in TypeScript in order to parse a text document using an authoring meta into known types which later will be used in RainDocument object and Rain Language Services and Compiler\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class Rainlang "
            }
          ],
          "fileUrlPath": "dist/types/parser/rainlang.d.ts",
          "releaseTag": "Public",
          "isAbstract": false,
          "name": "Rainlang",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@rainprotocol/rainlang!Rainlang:constructor(1)",
              "docComment": "/**\n * Constructor of Rainlang class\n *\n * @param text - the text\n *\n * @param authoringMeta - Array of ops metas\n *\n * @param authoringMeta - ExpressionDeployerNP deployed bytecode\n *\n * @param dotrainOptions - RainDocument (dotrain) only options\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(text: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", authoringMeta: "
                },
                {
                  "kind": "Reference",
                  "text": "Meta.Authoring",
                  "canonicalReference": "@rainprotocol/meta!Meta.Authoring"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ", bytecode: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", dotrainOptions?: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        namespaces?: "
                },
                {
                  "kind": "Reference",
                  "text": "AST.Namespace",
                  "canonicalReference": "@rainprotocol/rainlang!AST.Namespace:type"
                },
                {
                  "kind": "Content",
                  "text": ";\n        ignoreAuthoringMeta?: boolean;\n    }"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "text",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "authoringMeta",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 5
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "bytecode",
                  "parameterTypeTokenRange": {
                    "startIndex": 6,
                    "endIndex": 7
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "dotrainOptions",
                  "parameterTypeTokenRange": {
                    "startIndex": 8,
                    "endIndex": 11
                  },
                  "isOptional": true
                }
              ]
            },
            {
              "kind": "Property",
              "canonicalReference": "@rainprotocol/rainlang!Rainlang#ast:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "ast: "
                },
                {
                  "kind": "Reference",
                  "text": "AST.RainlangAST",
                  "canonicalReference": "@rainprotocol/rainlang!AST.RainlangAST:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "ast",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@rainprotocol/rainlang!Rainlang#authoringMeta:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "authoringMeta: "
                },
                {
                  "kind": "Reference",
                  "text": "Meta.Authoring",
                  "canonicalReference": "@rainprotocol/meta!Meta.Authoring"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "authoringMeta",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@rainprotocol/rainlang!Rainlang#binding:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "binding?: "
                },
                {
                  "kind": "Reference",
                  "text": "AST.Binding",
                  "canonicalReference": "@rainprotocol/rainlang!AST.Binding:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "binding",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@rainprotocol/rainlang!Rainlang#bytecode:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "bytecode: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "bytecode",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@rainprotocol/rainlang!Rainlang#comments:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "comments: "
                },
                {
                  "kind": "Reference",
                  "text": "AST.Comment",
                  "canonicalReference": "@rainprotocol/rainlang!AST.Comment:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "comments",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@rainprotocol/rainlang!Rainlang#constants:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly constants: "
                },
                {
                  "kind": "Reference",
                  "text": "Record",
                  "canonicalReference": "!Record:type"
                },
                {
                  "kind": "Content",
                  "text": "<string, string>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "constants",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@rainprotocol/rainlang!Rainlang.create:member(1)",
              "docComment": "/**\n * Creates a new Rainlang instance with a contract bytecode\n *\n * @param text - The text\n *\n * @param bytecode - The ExpressionDeployerNP deployed bytecode\n *\n * @param metaStore - (optional) The Meta.Store instance\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static create(text: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", bytecode: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", metaStore?: "
                },
                {
                  "kind": "Reference",
                  "text": "Meta.Store",
                  "canonicalReference": "@rainprotocol/meta!Meta.Store:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Rainlang",
                  "canonicalReference": "@rainprotocol/rainlang!Rainlang:class"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 11
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "text",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "bytecode",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "metaStore",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "create"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rainprotocol/rainlang!Rainlang.create:member(2)",
              "docComment": "/**\n * Creates a new Rainlang instance with a bytecode meta hash\n *\n * @param text - The text\n *\n * @param bytecodeHash - The bytecode meta hash\n *\n * @param metaStore - (optional) The Meta.Store instance\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static create(text: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", bytecodeHash: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", metaStore?: "
                },
                {
                  "kind": "Reference",
                  "text": "Meta.Store",
                  "canonicalReference": "@rainprotocol/meta!Meta.Store:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Rainlang",
                  "canonicalReference": "@rainprotocol/rainlang!Rainlang:class"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 11
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 2,
              "parameters": [
                {
                  "parameterName": "text",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "bytecodeHash",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "metaStore",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "create"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rainprotocol/rainlang!Rainlang#getRuntimeError:member(1)",
              "docComment": "/**\n * Get the current runtime error of this Rainlang instance\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getRuntimeError(): "
                },
                {
                  "kind": "Reference",
                  "text": "Error",
                  "canonicalReference": "!Error:interface"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "isAbstract": false,
              "name": "getRuntimeError"
            },
            {
              "kind": "Property",
              "canonicalReference": "@rainprotocol/rainlang!Rainlang#namespaces:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "namespaces: "
                },
                {
                  "kind": "Reference",
                  "text": "AST.Namespace",
                  "canonicalReference": "@rainprotocol/rainlang!AST.Namespace:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "namespaces",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@rainprotocol/rainlang!Rainlang#parse:member(1)",
              "docComment": "/**\n * Parses this instance of Rainlang\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "parse(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "isAbstract": false,
              "name": "parse"
            },
            {
              "kind": "Property",
              "canonicalReference": "@rainprotocol/rainlang!Rainlang#problems:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "problems: "
                },
                {
                  "kind": "Reference",
                  "text": "AST.Problem",
                  "canonicalReference": "@rainprotocol/rainlang!AST.Problem:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "problems",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@rainprotocol/rainlang!Rainlang#text:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "text: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "text",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@rainprotocol/rainlang!Rainlang#updateText:member(1)",
              "docComment": "/**\n * Updates the text of this Rainlang instance and parse it right after that\n *\n * @param newText - The new text\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "updateText(newText: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "newText",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "updateText"
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "Function",
          "canonicalReference": "@rainprotocol/rainlang!rainlang:function(1)",
          "docComment": "/**\n * Method to be used as Tagged Templates to activate embedded rainlang in javascript/typescript in vscode that highlights the rainlang syntax. Requires rainlang vscode extension to be installed.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function rainlang(stringChunks: "
            },
            {
              "kind": "Reference",
              "text": "TemplateStringsArray",
              "canonicalReference": "!TemplateStringsArray:interface"
            },
            {
              "kind": "Content",
              "text": ", ...vars: "
            },
            {
              "kind": "Content",
              "text": "any[]"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/types/parser/rainlang.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "stringChunks",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "vars",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "name": "rainlang"
        },
        {
          "kind": "Interface",
          "canonicalReference": "@rainprotocol/rainlang!RainLanguageServices:interface",
          "docComment": "/**\n * Interface for Rain language services\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface RainLanguageServices "
            }
          ],
          "fileUrlPath": "dist/types/languageService.d.ts",
          "releaseTag": "Public",
          "name": "RainLanguageServices",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "MethodSignature",
              "canonicalReference": "@rainprotocol/rainlang!RainLanguageServices#doComplete:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "doComplete(textDocument: "
                },
                {
                  "kind": "Reference",
                  "text": "TextDocument",
                  "canonicalReference": "@rainprotocol/rainlang!~TextDocument"
                },
                {
                  "kind": "Content",
                  "text": ", position: "
                },
                {
                  "kind": "Reference",
                  "text": "Position",
                  "canonicalReference": "@rainprotocol/rainlang!~Position"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "CompletionItem",
                  "canonicalReference": "@rainprotocol/rainlang!~CompletionItem"
                },
                {
                  "kind": "Content",
                  "text": "[] | null>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "textDocument",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "position",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "name": "doComplete"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@rainprotocol/rainlang!RainLanguageServices#doComplete:member(2)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "doComplete(rainDocument: "
                },
                {
                  "kind": "Reference",
                  "text": "RainDocument",
                  "canonicalReference": "@rainprotocol/rainlang!RainDocument:class"
                },
                {
                  "kind": "Content",
                  "text": ", position: "
                },
                {
                  "kind": "Reference",
                  "text": "Position",
                  "canonicalReference": "@rainprotocol/rainlang!~Position"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "CompletionItem",
                  "canonicalReference": "@rainprotocol/rainlang!~CompletionItem"
                },
                {
                  "kind": "Content",
                  "text": "[] | null>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "overloadIndex": 2,
              "parameters": [
                {
                  "parameterName": "rainDocument",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "position",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "name": "doComplete"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@rainprotocol/rainlang!RainLanguageServices#doHover:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "doHover(textDocument: "
                },
                {
                  "kind": "Reference",
                  "text": "TextDocument",
                  "canonicalReference": "@rainprotocol/rainlang!~TextDocument"
                },
                {
                  "kind": "Content",
                  "text": ", position: "
                },
                {
                  "kind": "Reference",
                  "text": "Position",
                  "canonicalReference": "@rainprotocol/rainlang!~Position"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Hover",
                  "canonicalReference": "@rainprotocol/rainlang!~Hover"
                },
                {
                  "kind": "Content",
                  "text": " | null>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "textDocument",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "position",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "name": "doHover"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@rainprotocol/rainlang!RainLanguageServices#doHover:member(2)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "doHover(rainDocument: "
                },
                {
                  "kind": "Reference",
                  "text": "RainDocument",
                  "canonicalReference": "@rainprotocol/rainlang!RainDocument:class"
                },
                {
                  "kind": "Content",
                  "text": ", position: "
                },
                {
                  "kind": "Reference",
                  "text": "Position",
                  "canonicalReference": "@rainprotocol/rainlang!~Position"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Hover",
                  "canonicalReference": "@rainprotocol/rainlang!~Hover"
                },
                {
                  "kind": "Content",
                  "text": " | null>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "overloadIndex": 2,
              "parameters": [
                {
                  "parameterName": "rainDocument",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "position",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "name": "doHover"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@rainprotocol/rainlang!RainLanguageServices#doValidate:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "doValidate(textDocument: "
                },
                {
                  "kind": "Reference",
                  "text": "TextDocument",
                  "canonicalReference": "@rainprotocol/rainlang!~TextDocument"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Diagnostic",
                  "canonicalReference": "@rainprotocol/rainlang!~Diagnostic"
                },
                {
                  "kind": "Content",
                  "text": "[]>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "textDocument",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "doValidate"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@rainprotocol/rainlang!RainLanguageServices#doValidate:member(2)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "doValidate(rainDocument: "
                },
                {
                  "kind": "Reference",
                  "text": "RainDocument",
                  "canonicalReference": "@rainprotocol/rainlang!RainDocument:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Diagnostic",
                  "canonicalReference": "@rainprotocol/rainlang!~Diagnostic"
                },
                {
                  "kind": "Content",
                  "text": "[]>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 2,
              "parameters": [
                {
                  "parameterName": "rainDocument",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "doValidate"
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@rainprotocol/rainlang!RainLanguageServices#metaStore:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "metaStore: "
                },
                {
                  "kind": "Reference",
                  "text": "Meta.Store",
                  "canonicalReference": "@rainprotocol/meta!Meta.Store:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "metaStore",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@rainprotocol/rainlang!RainLanguageServices#newRainDocument:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "newRainDocument(textDocument: "
                },
                {
                  "kind": "Reference",
                  "text": "TextDocument",
                  "canonicalReference": "@rainprotocol/rainlang!~TextDocument"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "RainDocument",
                  "canonicalReference": "@rainprotocol/rainlang!RainDocument:class"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "textDocument",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "newRainDocument"
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Function",
          "canonicalReference": "@rainprotocol/rainlang!recordToMap:function(1)",
          "docComment": "/**\n * Conver a Record (a key/value pair object) to a equivalent Map. Map keys will be of type acceptable by Record constructor, which are string, number or symbol.\n *\n * @param record - The Record to convert to a Map\n *\n * @param properties - (optional) properties to pick from the values of key/value pair items of the Record object.\n *\n * @returns Map Object from Record\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function recordToMap<K extends "
            },
            {
              "kind": "Content",
              "text": "string | number | symbol"
            },
            {
              "kind": "Content",
              "text": ">(record: "
            },
            {
              "kind": "Reference",
              "text": "Record",
              "canonicalReference": "!Record:type"
            },
            {
              "kind": "Content",
              "text": "<K, any>"
            },
            {
              "kind": "Content",
              "text": ", properties?: "
            },
            {
              "kind": "Content",
              "text": "string | string[]"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Map",
              "canonicalReference": "!Map:interface"
            },
            {
              "kind": "Content",
              "text": "<K, any>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/types/utils.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 8,
            "endIndex": 10
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "record",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "isOptional": false
            },
            {
              "parameterName": "properties",
              "parameterTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              },
              "isOptional": true
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "K",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "recordToMap"
        },
        {
          "kind": "Function",
          "canonicalReference": "@rainprotocol/rainlang!searchNamespace:function(1)",
          "docComment": "/**\n * Search in a Namespace for a given name\n *\n * @param name - The name\n *\n * @param namespace - The Namespace\n *\n * @returns An object that contains the found item and the parent namespace\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function searchNamespace(name: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", namespace: "
            },
            {
              "kind": "Reference",
              "text": "AST.Namespace",
              "canonicalReference": "@rainprotocol/rainlang!AST.Namespace:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "{\n    child: "
            },
            {
              "kind": "Reference",
              "text": "AST.Namespace",
              "canonicalReference": "@rainprotocol/rainlang!AST.Namespace:type"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "AST.NamespaceNode",
              "canonicalReference": "@rainprotocol/rainlang!AST.NamespaceNode:type"
            },
            {
              "kind": "Content",
              "text": ";\n    parent: "
            },
            {
              "kind": "Reference",
              "text": "AST.Namespace",
              "canonicalReference": "@rainprotocol/rainlang!AST.Namespace:type"
            },
            {
              "kind": "Content",
              "text": ";\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/types/parser/compiler.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 12
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "name",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "namespace",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "name": "searchNamespace"
        },
        {
          "kind": "Variable",
          "canonicalReference": "@rainprotocol/rainlang!stringToUint8Array:var",
          "docComment": "/**\n * Converts a string to uint8array\n *\n * @param text - the text to convert\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "stringToUint8Array: "
            },
            {
              "kind": "Content",
              "text": "(text: string) => "
            },
            {
              "kind": "Reference",
              "text": "Uint8Array",
              "canonicalReference": "!Uint8Array:interface"
            }
          ],
          "fileUrlPath": "dist/types/utils.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "stringToUint8Array",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "@rainprotocol/rainlang!toInteger:function(1)",
          "docComment": "/**\n * Convert Rainlang numeric values to interger as string\n *\n * @param value - The value to convert\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function toInteger(value: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/types/utils.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "value",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "toInteger"
        },
        {
          "kind": "Function",
          "canonicalReference": "@rainprotocol/rainlang!trim:function(1)",
          "docComment": "/**\n * Trims a text (removing start/end whitespaces) with reporting the number of deletions\n *\n * @param str - The text to trim\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function trim(str: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "{\n    text: string;\n    startDelCount: number;\n    endDelCount: number;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/types/utils.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "str",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "trim"
        },
        {
          "kind": "Function",
          "canonicalReference": "@rainprotocol/rainlang!uint8ArrayToString:function(1)",
          "docComment": "/**\n * Method to convert Uint8Array to string\n *\n * @param uint8array - The array\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function uint8ArrayToString(uint8array: "
            },
            {
              "kind": "Reference",
              "text": "Uint8Array",
              "canonicalReference": "!Uint8Array:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/types/utils.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "uint8array",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "uint8ArrayToString"
        },
        {
          "kind": "Variable",
          "canonicalReference": "@rainprotocol/rainlang!VITALIK:var",
          "docComment": "/**\n * vitalik address used for evm simulations\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "VITALIK: "
            },
            {
              "kind": "Content",
              "text": "\"0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045\""
            }
          ],
          "fileUrlPath": "dist/types/utils.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "VITALIK",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@rainprotocol/rainlang!WORD_PATTERN:var",
          "docComment": "/**\n * Rainlang word pattern\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "WORD_PATTERN: "
            },
            {
              "kind": "Reference",
              "text": "RegExp",
              "canonicalReference": "!RegExp:interface"
            }
          ],
          "fileUrlPath": "dist/types/languageTypes.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "WORD_PATTERN",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@rainprotocol/rainlang!zeroPad:var",
          "docComment": "/**\n * ethers zeroPad\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "zeroPad: "
            },
            {
              "kind": "Content",
              "text": "typeof "
            },
            {
              "kind": "Reference",
              "text": "utils.zeroPad",
              "canonicalReference": "@ethersproject/bytes!zeroPad:function"
            }
          ],
          "fileUrlPath": "dist/types/utils.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "zeroPad",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          }
        }
      ]
    }
  ]
}
