{
  "metadata": {
    "toolPackage": "@microsoft/api-extractor",
    "toolVersion": "7.34.4",
    "schemaVersion": 1011,
    "oldestForwardsCompatibleVersion": 1001,
    "tsdocConfig": {
      "$schema": "https://developer.microsoft.com/json-schemas/tsdoc/v0/tsdoc.schema.json",
      "noStandardTags": true,
      "tagDefinitions": [
        {
          "tagName": "@alpha",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@beta",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@defaultValue",
          "syntaxKind": "block"
        },
        {
          "tagName": "@decorator",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@deprecated",
          "syntaxKind": "block"
        },
        {
          "tagName": "@eventProperty",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@example",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@experimental",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@inheritDoc",
          "syntaxKind": "inline"
        },
        {
          "tagName": "@internal",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@label",
          "syntaxKind": "inline"
        },
        {
          "tagName": "@link",
          "syntaxKind": "inline",
          "allowMultiple": true
        },
        {
          "tagName": "@override",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@packageDocumentation",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@param",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@privateRemarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@public",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@readonly",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@remarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@returns",
          "syntaxKind": "block"
        },
        {
          "tagName": "@sealed",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@see",
          "syntaxKind": "block"
        },
        {
          "tagName": "@throws",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@typeParam",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@virtual",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@betaDocumentation",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@internalRemarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@preapproved",
          "syntaxKind": "modifier"
        }
      ],
      "supportForTags": {
        "@alpha": true,
        "@beta": true,
        "@defaultValue": true,
        "@decorator": true,
        "@deprecated": true,
        "@eventProperty": true,
        "@example": true,
        "@experimental": true,
        "@inheritDoc": true,
        "@internal": true,
        "@label": true,
        "@link": true,
        "@override": true,
        "@packageDocumentation": true,
        "@param": true,
        "@privateRemarks": true,
        "@public": true,
        "@readonly": true,
        "@remarks": true,
        "@returns": true,
        "@sealed": true,
        "@see": true,
        "@throws": true,
        "@typeParam": true,
        "@virtual": true,
        "@betaDocumentation": true,
        "@internalRemarks": true,
        "@preapproved": true
      },
      "reportUnsupportedHtmlElements": false
    }
  },
  "kind": "Package",
  "canonicalReference": "@rainprotocol/rainlang!",
  "docComment": "",
  "name": "@rainprotocol/rainlang",
  "preserveMemberOrder": false,
  "members": [
    {
      "kind": "EntryPoint",
      "canonicalReference": "@rainprotocol/rainlang!",
      "name": "",
      "preserveMemberOrder": false,
      "members": [
        {
          "kind": "Variable",
          "canonicalReference": "@rainprotocol/rainlang!areEqualStateConfigs:var",
          "docComment": "/**\n * Checks 2 ExpressionConfig objects to see if they are equal or not\n *\n * @param config1 - first ExpressionConfig\n *\n * @param config2 - second ExpressionConfig\n *\n * @returns boolean\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "areEqualStateConfigs: "
            },
            {
              "kind": "Content",
              "text": "(config1: "
            },
            {
              "kind": "Reference",
              "text": "ExpressionConfig",
              "canonicalReference": "@rainprotocol/rainlang!ExpressionConfig:type"
            },
            {
              "kind": "Content",
              "text": ", config2: "
            },
            {
              "kind": "Reference",
              "text": "ExpressionConfig",
              "canonicalReference": "@rainprotocol/rainlang!ExpressionConfig:type"
            },
            {
              "kind": "Content",
              "text": ") => boolean"
            }
          ],
          "fileUrlPath": "dist/types/utils.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "areEqualStateConfigs",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 6
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@rainprotocol/rainlang!arrayify:var",
          "docComment": "/**\n * ethers arrayify\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "arrayify: "
            },
            {
              "kind": "Content",
              "text": "typeof "
            },
            {
              "kind": "Reference",
              "text": "utils.arrayify",
              "canonicalReference": "@ethersproject/bytes!arrayify:function"
            }
          ],
          "fileUrlPath": "dist/types/utils.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "arrayify",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "@rainprotocol/rainlang!buildMetaInfo:function(1)",
          "docComment": "/**\n * Build a general info from a meta content (used as hover info for a meta hash)\n *\n * @param hash - The meta hash to build info from\n *\n * @param metaStore - The meta store instance that keeps this hash as record\n *\n * @returns A promise that resolves with general info about the meta\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function buildMetaInfo(hash: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", metaStore: "
            },
            {
              "kind": "Reference",
              "text": "MetaStore",
              "canonicalReference": "@rainprotocol/rainlang!MetaStore:class"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<string>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/types/services/hover.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "hash",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "metaStore",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "name": "buildMetaInfo"
        },
        {
          "kind": "Variable",
          "canonicalReference": "@rainprotocol/rainlang!bytify:var",
          "docComment": "/**\n * Converts a value to raw bytes representation. Assumes `value` is less than or equal to 1 byte, unless a desired `bytesLength` is specified.\n *\n * @param value - value to convert to raw bytes format\n *\n * @param bytesLength - (defaults to 1) number of bytes to left pad if `value` doesn't completely fill the desired amount of memory. Will throw `InvalidArgument` error if value already exceeds bytes length.\n *\n * @returns raw bytes representation as Uint8Array\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "bytify: "
            },
            {
              "kind": "Content",
              "text": "(value: number | "
            },
            {
              "kind": "Reference",
              "text": "BytesLike",
              "canonicalReference": "@ethersproject/bytes!BytesLike:type"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "utils.Hexable",
              "canonicalReference": "@ethersproject/bytes!Hexable:interface"
            },
            {
              "kind": "Content",
              "text": ", bytesLength?: number) => "
            },
            {
              "kind": "Reference",
              "text": "BytesLike",
              "canonicalReference": "@ethersproject/bytes!BytesLike:type"
            }
          ],
          "fileUrlPath": "dist/types/utils.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "bytify",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 7
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@rainprotocol/rainlang!ClientCapabilities:interface",
          "docComment": "/**\n * Describes what LSP capabilities the client supports\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ClientCapabilities "
            }
          ],
          "fileUrlPath": "dist/types/rainLanguageTypes.d.ts",
          "releaseTag": "Public",
          "name": "ClientCapabilities",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@rainprotocol/rainlang!ClientCapabilities#textDocument:member",
              "docComment": "/**\n * The text document client capabilities\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "textDocument?: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        publishDiagnostics?: {\n            relatedInformation?: boolean;\n        };\n        completion?: {\n            completionItem?: {\n                documentationFormat?: "
                },
                {
                  "kind": "Reference",
                  "text": "MarkupKind",
                  "canonicalReference": "@rainprotocol/rainlang!~MarkupKind"
                },
                {
                  "kind": "Content",
                  "text": "[];\n            };\n        };\n        hover?: {\n            contentFormat?: "
                },
                {
                  "kind": "Reference",
                  "text": "MarkupKind",
                  "canonicalReference": "@rainprotocol/rainlang!~MarkupKind"
                },
                {
                  "kind": "Content",
                  "text": "[];\n        };\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "textDocument",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Namespace",
          "canonicalReference": "@rainprotocol/rainlang!ClientCapabilities:namespace",
          "docComment": "/**\n * Predefined latest client capabilities\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare namespace ClientCapabilities "
            }
          ],
          "fileUrlPath": "dist/types/rainLanguageTypes.d.ts",
          "releaseTag": "Public",
          "name": "ClientCapabilities",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Variable",
              "canonicalReference": "@rainprotocol/rainlang!ClientCapabilities.ALL:var",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "ALL: "
                },
                {
                  "kind": "Reference",
                  "text": "ClientCapabilities",
                  "canonicalReference": "@rainprotocol/rainlang!ClientCapabilities:interface"
                }
              ],
              "isReadonly": true,
              "releaseTag": "Public",
              "name": "ALL",
              "variableTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ]
        },
        {
          "kind": "Enum",
          "canonicalReference": "@rainprotocol/rainlang!CompletionTriggerKind:enum",
          "docComment": "/**\n * How a completion was triggered\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare enum CompletionTriggerKind "
            }
          ],
          "fileUrlPath": "dist/types/rainLanguageTypes.d.ts",
          "releaseTag": "Public",
          "name": "CompletionTriggerKind",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "EnumMember",
              "canonicalReference": "@rainprotocol/rainlang!CompletionTriggerKind.Invoked:member",
              "docComment": "/**\n * Completion was triggered by typing an identifier (24x7 code complete), manual invocation (e.g Ctrl+Space) or via API.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Invoked = "
                },
                {
                  "kind": "Content",
                  "text": "1"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "Invoked"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@rainprotocol/rainlang!CompletionTriggerKind.TriggerCharacter:member",
              "docComment": "/**\n * Completion was triggered by a trigger character specified by the `triggerCharacters` properties of the `CompletionRegistrationOptions`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "TriggerCharacter = "
                },
                {
                  "kind": "Content",
                  "text": "2"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "TriggerCharacter"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@rainprotocol/rainlang!CompletionTriggerKind.TriggerForIncompleteCompletions:member",
              "docComment": "/**\n * Completion was re-triggered as current completion list is incomplete\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "TriggerForIncompleteCompletions = "
                },
                {
                  "kind": "Content",
                  "text": "3"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "TriggerForIncompleteCompletions"
            }
          ]
        },
        {
          "kind": "Variable",
          "canonicalReference": "@rainprotocol/rainlang!concat:var",
          "docComment": "/**\n * ethers concat\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "concat: "
            },
            {
              "kind": "Content",
              "text": "typeof "
            },
            {
              "kind": "Reference",
              "text": "utils.concat",
              "canonicalReference": "@ethersproject/bytes!concat:function"
            }
          ],
          "fileUrlPath": "dist/types/utils.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "concat",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@rainprotocol/rainlang!CONSTANTS:var",
          "docComment": "/**\n * ethers constants\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "CONSTANTS: "
            },
            {
              "kind": "Content",
              "text": "typeof "
            },
            {
              "kind": "Reference",
              "text": "ethers.constants",
              "canonicalReference": "ethers!constants"
            }
          ],
          "fileUrlPath": "dist/types/utils.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "CONSTANTS",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "@rainprotocol/rainlang!constructByBits:function(1)",
          "docComment": "/**\n * Method to construct the operand from operand args\n *\n * @param args - Operand arguments\n *\n * @returns operand value\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function constructByBits(args: "
            },
            {
              "kind": "Content",
              "text": "{\n    value: number;\n    bits: [number, number];\n    computation?: string;\n    validRange?: number[][];\n    computationVar?: string;\n}[]"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "number | number[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/types/utils.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "args",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "constructByBits"
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@rainprotocol/rainlang!ContextAlias:type",
          "docComment": "/**\n * Type for context cell alias\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type ContextAlias = "
            },
            {
              "kind": "Content",
              "text": "{\n    name: string;\n    desc: string;\n    column: number;\n    row: number;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/types/rainLanguageTypes.d.ts",
          "releaseTag": "Public",
          "name": "ContextAlias",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "@rainprotocol/rainlang!deepCopy:function(1)",
          "docComment": "/**\n * Deep copy an item in a way that all of its properties get new reference\n *\n * @param variable - The variable to copy\n *\n * @returns a new deep copy of the variable\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function deepCopy<T>(variable: "
            },
            {
              "kind": "Content",
              "text": "T"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "T"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/types/utils.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "variable",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "deepCopy"
        },
        {
          "kind": "Function",
          "canonicalReference": "@rainprotocol/rainlang!deepFreeze:function(1)",
          "docComment": "/**\n * Deeply freezes an object, all of the properties of propterties gets frozen\n *\n * @param object - object to freez\n *\n * @returns frozen object\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function deepFreeze(object: "
            },
            {
              "kind": "Content",
              "text": "any"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "any"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/types/utils.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "object",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "deepFreeze"
        },
        {
          "kind": "Enum",
          "canonicalReference": "@rainprotocol/rainlang!ErrorCode:enum",
          "docComment": "/**\n * Error codes used by diagnostics\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare enum ErrorCode "
            }
          ],
          "fileUrlPath": "dist/types/rainLanguageTypes.d.ts",
          "releaseTag": "Public",
          "name": "ErrorCode",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "EnumMember",
              "canonicalReference": "@rainprotocol/rainlang!ErrorCode.DuplicateAlias:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "DuplicateAlias = "
                },
                {
                  "kind": "Content",
                  "text": "2048"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "DuplicateAlias"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@rainprotocol/rainlang!ErrorCode.ExpectedClosingAngleBracket:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "ExpectedClosingAngleBracket = "
                },
                {
                  "kind": "Content",
                  "text": "774"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "ExpectedClosingAngleBracket"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@rainprotocol/rainlang!ErrorCode.ExpectedClosingParen:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "ExpectedClosingParen = "
                },
                {
                  "kind": "Content",
                  "text": "772"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "ExpectedClosingParen"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@rainprotocol/rainlang!ErrorCode.ExpectedOpcode:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "ExpectedOpcode = "
                },
                {
                  "kind": "Content",
                  "text": "769"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "ExpectedOpcode"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@rainprotocol/rainlang!ErrorCode.ExpectedOpeningParen:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "ExpectedOpeningParen = "
                },
                {
                  "kind": "Content",
                  "text": "773"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "ExpectedOpeningParen"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@rainprotocol/rainlang!ErrorCode.ExpectedOperandArgs:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "ExpectedOperandArgs = "
                },
                {
                  "kind": "Content",
                  "text": "771"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "ExpectedOperandArgs"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@rainprotocol/rainlang!ErrorCode.ExpectedSpace:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "ExpectedSpace = "
                },
                {
                  "kind": "Content",
                  "text": "770"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "ExpectedSpace"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@rainprotocol/rainlang!ErrorCode.InvalidContractMeta:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "InvalidContractMeta = "
                },
                {
                  "kind": "Content",
                  "text": "265"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "InvalidContractMeta"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@rainprotocol/rainlang!ErrorCode.InvalidExpression:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "InvalidExpression = "
                },
                {
                  "kind": "Content",
                  "text": "258"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "InvalidExpression"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@rainprotocol/rainlang!ErrorCode.InvalidInputsMeta:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "InvalidInputsMeta = "
                },
                {
                  "kind": "Content",
                  "text": "259"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "InvalidInputsMeta"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@rainprotocol/rainlang!ErrorCode.InvalidMetaHash:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "InvalidMetaHash = "
                },
                {
                  "kind": "Content",
                  "text": "263"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "InvalidMetaHash"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@rainprotocol/rainlang!ErrorCode.InvalidNestedNode:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "InvalidNestedNode = "
                },
                {
                  "kind": "Content",
                  "text": "261"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "InvalidNestedNode"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@rainprotocol/rainlang!ErrorCode.InvalidOpMeta:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "InvalidOpMeta = "
                },
                {
                  "kind": "Content",
                  "text": "264"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "InvalidOpMeta"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@rainprotocol/rainlang!ErrorCode.InvalidOutputsMeta:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "InvalidOutputsMeta = "
                },
                {
                  "kind": "Content",
                  "text": "260"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "InvalidOutputsMeta"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@rainprotocol/rainlang!ErrorCode.InvalidSelfReferenceLHS:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "InvalidSelfReferenceLHS = "
                },
                {
                  "kind": "Content",
                  "text": "262"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "InvalidSelfReferenceLHS"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@rainprotocol/rainlang!ErrorCode.InvalidWordPattern:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "InvalidWordPattern = "
                },
                {
                  "kind": "Content",
                  "text": "257"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "InvalidWordPattern"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@rainprotocol/rainlang!ErrorCode.MismatchLHS:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "MismatchLHS = "
                },
                {
                  "kind": "Content",
                  "text": "1026"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "MismatchLHS"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@rainprotocol/rainlang!ErrorCode.MismatchOperandArgs:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "MismatchOperandArgs = "
                },
                {
                  "kind": "Content",
                  "text": "1027"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "MismatchOperandArgs"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@rainprotocol/rainlang!ErrorCode.MismatchRHS:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "MismatchRHS = "
                },
                {
                  "kind": "Content",
                  "text": "1025"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "MismatchRHS"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@rainprotocol/rainlang!ErrorCode.NonPrintableASCIIChar:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "NonPrintableASCIIChar = "
                },
                {
                  "kind": "Content",
                  "text": "2"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "NonPrintableASCIIChar"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@rainprotocol/rainlang!ErrorCode.OutOfRangeInputs:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "OutOfRangeInputs = "
                },
                {
                  "kind": "Content",
                  "text": "1281"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "OutOfRangeInputs"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@rainprotocol/rainlang!ErrorCode.OutOfRangeOperandArgs:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "OutOfRangeOperandArgs = "
                },
                {
                  "kind": "Content",
                  "text": "1282"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "OutOfRangeOperandArgs"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@rainprotocol/rainlang!ErrorCode.OutOfRangeValue:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "OutOfRangeValue = "
                },
                {
                  "kind": "Content",
                  "text": "1283"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "OutOfRangeValue"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@rainprotocol/rainlang!ErrorCode.RuntimeError:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "RuntimeError = "
                },
                {
                  "kind": "Content",
                  "text": "1792"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "RuntimeError"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@rainprotocol/rainlang!ErrorCode.UndefinedMeta:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "UndefinedMeta = "
                },
                {
                  "kind": "Content",
                  "text": "3"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "UndefinedMeta"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@rainprotocol/rainlang!ErrorCode.UndefinedOpMeta:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "UndefinedOpMeta = "
                },
                {
                  "kind": "Content",
                  "text": "0"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "UndefinedOpMeta"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@rainprotocol/rainlang!ErrorCode.UndefinedWord:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "UndefinedWord = "
                },
                {
                  "kind": "Content",
                  "text": "1"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "UndefinedWord"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@rainprotocol/rainlang!ErrorCode.UnexpectedClosingParen:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "UnexpectedClosingParen = "
                },
                {
                  "kind": "Content",
                  "text": "514"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "UnexpectedClosingParen"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@rainprotocol/rainlang!ErrorCode.UnexpectedEndOfComment:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "UnexpectedEndOfComment = "
                },
                {
                  "kind": "Content",
                  "text": "513"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "UnexpectedEndOfComment"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@rainprotocol/rainlang!ErrorCode.UnexpectedMetaHash:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "UnexpectedMetaHash = "
                },
                {
                  "kind": "Content",
                  "text": "516"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "UnexpectedMetaHash"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@rainprotocol/rainlang!ErrorCode.UnexpectedRHSComment:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "UnexpectedRHSComment = "
                },
                {
                  "kind": "Content",
                  "text": "515"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "UnexpectedRHSComment"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@rainprotocol/rainlang!ErrorCode.UnknownOp:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "UnknownOp = "
                },
                {
                  "kind": "Content",
                  "text": "1536"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "UnknownOp"
            }
          ]
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@rainprotocol/rainlang!ExpressionConfig:type",
          "docComment": "/**\n * Type of valid parsed expression, i.e. compiled bytes\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type ExpressionConfig = "
            },
            {
              "kind": "Content",
              "text": "{\n    sources: "
            },
            {
              "kind": "Reference",
              "text": "BytesLike",
              "canonicalReference": "@ethersproject/bytes!BytesLike:type"
            },
            {
              "kind": "Content",
              "text": "[];\n    constants: "
            },
            {
              "kind": "Reference",
              "text": "BigNumberish",
              "canonicalReference": "@ethersproject/bignumber!BigNumberish:type"
            },
            {
              "kind": "Content",
              "text": "[];\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/types/rainLanguageTypes.d.ts",
          "releaseTag": "Public",
          "name": "ExpressionConfig",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 6
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "@rainprotocol/rainlang!extractByBits:function(1)",
          "docComment": "/**\n * Method to extract value from operand by specified bits indexes\n *\n * @param value - Operand value\n *\n * @param bits - Bits indexes to extract\n *\n * @param computation - Any arethmetical operation to apply to extracted value\n *\n * @param computationVar - The variavle in compuation to solve for, default is \"bits\"\n *\n * @returns Extracted value\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function extractByBits(value: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ", bits: "
            },
            {
              "kind": "Content",
              "text": "[number, number]"
            },
            {
              "kind": "Content",
              "text": ", computation?: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", computationVar?: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/types/utils.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 9,
            "endIndex": 10
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "value",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "bits",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            },
            {
              "parameterName": "computation",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "isOptional": true
            },
            {
              "parameterName": "computationVar",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "isOptional": true
            }
          ],
          "name": "extractByBits"
        },
        {
          "kind": "Function",
          "canonicalReference": "@rainprotocol/rainlang!extractFromMap:function(1)",
          "docComment": "/**\n * Extract some of the properites from a Map as a new Map with same keys.\n *\n * @param map - the map to extract from\n *\n * @param properties - name of the properties in second item of the map elements\n *\n * @returns a new Map with extracted properties\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function extractFromMap(map: "
            },
            {
              "kind": "Reference",
              "text": "Map",
              "canonicalReference": "!Map:interface"
            },
            {
              "kind": "Content",
              "text": "<any, any>"
            },
            {
              "kind": "Content",
              "text": ", properties: "
            },
            {
              "kind": "Content",
              "text": "string[]"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Map",
              "canonicalReference": "!Map:interface"
            },
            {
              "kind": "Content",
              "text": "<any, any>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/types/utils.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 6,
            "endIndex": 8
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "map",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isOptional": false
            },
            {
              "parameterName": "properties",
              "parameterTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 5
              },
              "isOptional": false
            }
          ],
          "name": "extractFromMap"
        },
        {
          "kind": "Function",
          "canonicalReference": "@rainprotocol/rainlang!extractFromRecord:function(1)",
          "docComment": "/**\n * Extract some of the properties from a Record as new Record with same keys.\n *\n * @param record - the record to extract from.\n *\n * @param properties - name of the properties in value item of the key/va;ue pair of a Record object\n *\n * @returns a new Record with extracted key/value pairs\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function extractFromRecord<T extends "
            },
            {
              "kind": "Content",
              "text": "string | number | symbol"
            },
            {
              "kind": "Content",
              "text": ">(record: "
            },
            {
              "kind": "Reference",
              "text": "Record",
              "canonicalReference": "!Record:type"
            },
            {
              "kind": "Content",
              "text": "<T, any>"
            },
            {
              "kind": "Content",
              "text": ", properties: "
            },
            {
              "kind": "Content",
              "text": "string | string[]"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Record",
              "canonicalReference": "!Record:type"
            },
            {
              "kind": "Content",
              "text": "<T, any>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/types/utils.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 8,
            "endIndex": 10
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "record",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "isOptional": false
            },
            {
              "parameterName": "properties",
              "parameterTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              },
              "isOptional": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "extractFromRecord"
        },
        {
          "kind": "Function",
          "canonicalReference": "@rainprotocol/rainlang!getRainlangCompletion:function(1)",
          "docComment": "/**\n * Provides completion items\n *\n * @param document - The TextDocuemnt\n *\n * @param position - Position of the textDocument to get the completion items for\n *\n * @param setting - (optional) Language service params\n *\n * @returns A promise that resolves with Completion items or null if no completion items were available for that position\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getRainlangCompletion(document: "
            },
            {
              "kind": "Reference",
              "text": "TextDocument",
              "canonicalReference": "@rainprotocol/rainlang!~TextDocument"
            },
            {
              "kind": "Content",
              "text": ", position: "
            },
            {
              "kind": "Reference",
              "text": "Position",
              "canonicalReference": "@rainprotocol/rainlang!~Position"
            },
            {
              "kind": "Content",
              "text": ", setting?: "
            },
            {
              "kind": "Reference",
              "text": "LanguageServiceParams",
              "canonicalReference": "@rainprotocol/rainlang!LanguageServiceParams:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "CompletionItem",
              "canonicalReference": "@rainprotocol/rainlang!~CompletionItem"
            },
            {
              "kind": "Content",
              "text": "[] | null>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/types/services/completion.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 11
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "document",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "position",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            },
            {
              "parameterName": "setting",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "isOptional": true
            }
          ],
          "name": "getRainlangCompletion"
        },
        {
          "kind": "Function",
          "canonicalReference": "@rainprotocol/rainlang!getRainlangCompletion:function(2)",
          "docComment": "/**\n * Provides completion items\n *\n * @param document - The RainDocument object instance\n *\n * @param position - Position of the textDocument to get the completion items for\n *\n * @param setting - (optional) Language service params\n *\n * @returns A promise that resolves with Completion items or null if no completion items were available for that position\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getRainlangCompletion(document: "
            },
            {
              "kind": "Reference",
              "text": "RainDocument",
              "canonicalReference": "@rainprotocol/rainlang!RainDocument:class"
            },
            {
              "kind": "Content",
              "text": ", position: "
            },
            {
              "kind": "Reference",
              "text": "Position",
              "canonicalReference": "@rainprotocol/rainlang!~Position"
            },
            {
              "kind": "Content",
              "text": ", setting?: "
            },
            {
              "kind": "Reference",
              "text": "LanguageServiceParams",
              "canonicalReference": "@rainprotocol/rainlang!LanguageServiceParams:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "CompletionItem",
              "canonicalReference": "@rainprotocol/rainlang!~CompletionItem"
            },
            {
              "kind": "Content",
              "text": "[] | null>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/types/services/completion.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 11
          },
          "releaseTag": "Public",
          "overloadIndex": 2,
          "parameters": [
            {
              "parameterName": "document",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "position",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            },
            {
              "parameterName": "setting",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "isOptional": true
            }
          ],
          "name": "getRainlangCompletion"
        },
        {
          "kind": "Function",
          "canonicalReference": "@rainprotocol/rainlang!getRainlangDiagnostics:function(1)",
          "docComment": "/**\n * Provides diagnostics\n *\n * @param document - The TextDocument\n *\n * @param setting - (optional) Language service params\n *\n * @returns A promise that resolves with diagnostics\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getRainlangDiagnostics(document: "
            },
            {
              "kind": "Reference",
              "text": "TextDocument",
              "canonicalReference": "@rainprotocol/rainlang!~TextDocument"
            },
            {
              "kind": "Content",
              "text": ", setting?: "
            },
            {
              "kind": "Reference",
              "text": "LanguageServiceParams",
              "canonicalReference": "@rainprotocol/rainlang!LanguageServiceParams:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "Diagnostic",
              "canonicalReference": "@rainprotocol/rainlang!~Diagnostic"
            },
            {
              "kind": "Content",
              "text": "[]>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/types/services/diagnostics.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 9
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "document",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "setting",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": true
            }
          ],
          "name": "getRainlangDiagnostics"
        },
        {
          "kind": "Function",
          "canonicalReference": "@rainprotocol/rainlang!getRainlangDiagnostics:function(2)",
          "docComment": "/**\n * Provides diagnostics\n *\n * @param document - The RainDocument\n *\n * @param setting - (optional) Language service params\n *\n * @returns A promise that resolves with diagnostics\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getRainlangDiagnostics(document: "
            },
            {
              "kind": "Reference",
              "text": "RainDocument",
              "canonicalReference": "@rainprotocol/rainlang!RainDocument:class"
            },
            {
              "kind": "Content",
              "text": ", setting?: "
            },
            {
              "kind": "Reference",
              "text": "LanguageServiceParams",
              "canonicalReference": "@rainprotocol/rainlang!LanguageServiceParams:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "Diagnostic",
              "canonicalReference": "@rainprotocol/rainlang!~Diagnostic"
            },
            {
              "kind": "Content",
              "text": "[]>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/types/services/diagnostics.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 9
          },
          "releaseTag": "Public",
          "overloadIndex": 2,
          "parameters": [
            {
              "parameterName": "document",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "setting",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": true
            }
          ],
          "name": "getRainlangDiagnostics"
        },
        {
          "kind": "Function",
          "canonicalReference": "@rainprotocol/rainlang!getRainlangHover:function(1)",
          "docComment": "/**\n * Provides hover items\n *\n * @param document - The TextDocuemnt\n *\n * @param position - Position of the textDocument to get the completion items for\n *\n * @param setting - (optional) Language service params\n *\n * @returns Promise of hover item and null if no item was available for that position\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getRainlangHover(document: "
            },
            {
              "kind": "Reference",
              "text": "TextDocument",
              "canonicalReference": "@rainprotocol/rainlang!~TextDocument"
            },
            {
              "kind": "Content",
              "text": ", position: "
            },
            {
              "kind": "Reference",
              "text": "Position",
              "canonicalReference": "@rainprotocol/rainlang!~Position"
            },
            {
              "kind": "Content",
              "text": ", setting?: "
            },
            {
              "kind": "Reference",
              "text": "LanguageServiceParams",
              "canonicalReference": "@rainprotocol/rainlang!LanguageServiceParams:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "Hover",
              "canonicalReference": "@rainprotocol/rainlang!~Hover"
            },
            {
              "kind": "Content",
              "text": " | null>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/types/services/hover.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 11
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "document",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "position",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            },
            {
              "parameterName": "setting",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "isOptional": true
            }
          ],
          "name": "getRainlangHover"
        },
        {
          "kind": "Function",
          "canonicalReference": "@rainprotocol/rainlang!getRainlangHover:function(2)",
          "docComment": "/**\n * Provides hover items\n *\n * @param document - The RainDocument object instance\n *\n * @param position - Position of the textDocument to get the completion items for\n *\n * @param setting - (optional) Language service params\n *\n * @returns Promise of hover item and null if no item was available for that position\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getRainlangHover(document: "
            },
            {
              "kind": "Reference",
              "text": "RainDocument",
              "canonicalReference": "@rainprotocol/rainlang!RainDocument:class"
            },
            {
              "kind": "Content",
              "text": ", position: "
            },
            {
              "kind": "Reference",
              "text": "Position",
              "canonicalReference": "@rainprotocol/rainlang!~Position"
            },
            {
              "kind": "Content",
              "text": ", setting?: "
            },
            {
              "kind": "Reference",
              "text": "LanguageServiceParams",
              "canonicalReference": "@rainprotocol/rainlang!LanguageServiceParams:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "Hover",
              "canonicalReference": "@rainprotocol/rainlang!~Hover"
            },
            {
              "kind": "Content",
              "text": " | null>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/types/services/hover.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 11
          },
          "releaseTag": "Public",
          "overloadIndex": 2,
          "parameters": [
            {
              "parameterName": "document",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "position",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            },
            {
              "parameterName": "setting",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "isOptional": true
            }
          ],
          "name": "getRainlangHover"
        },
        {
          "kind": "Function",
          "canonicalReference": "@rainprotocol/rainlang!getRainLanguageServices:function(1)",
          "docComment": "/**\n * Main function to get Rain language services initiated and ready to recieve TextDocuments to provide the desired language services\n *\n * @example\n * ```ts\n * // importing\n * import { getRainLanguageServices } from \"@rainprotocol/rainlang\";\n *\n * // initiating the services\n * const langServices = getRainLanguageServices({clientCapabilities, metastore});\n *\n * // getting validation results (lsp Diagnostics)\n * const errors = await langServices.doValidate(myTextDocument);\n * ```\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getRainLanguageServices(params?: "
            },
            {
              "kind": "Reference",
              "text": "LanguageServiceParams",
              "canonicalReference": "@rainprotocol/rainlang!LanguageServiceParams:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "RainLanguageServices",
              "canonicalReference": "@rainprotocol/rainlang!RainLanguageServices:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/types/rainLanguageService.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "params",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": true
            }
          ],
          "name": "getRainLanguageServices"
        },
        {
          "kind": "Variable",
          "canonicalReference": "@rainprotocol/rainlang!hexlify:var",
          "docComment": "/**\n * ethers hexlify\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "hexlify: "
            },
            {
              "kind": "Content",
              "text": "typeof "
            },
            {
              "kind": "Reference",
              "text": "utils.hexlify",
              "canonicalReference": "@ethersproject/bytes!hexlify:function"
            }
          ],
          "fileUrlPath": "dist/types/utils.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "hexlify",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@rainprotocol/rainlang!hexZeroPad:var",
          "docComment": "/**\n * ethers hexZeroPad\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "hexZeroPad: "
            },
            {
              "kind": "Content",
              "text": "typeof "
            },
            {
              "kind": "Reference",
              "text": "utils.hexZeroPad",
              "canonicalReference": "@ethersproject/bytes!hexZeroPad:function"
            }
          ],
          "fileUrlPath": "dist/types/utils.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "hexZeroPad",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "@rainprotocol/rainlang!isBigNumberish:function(1)",
          "docComment": "/**\n * function to check if the a value is of type BigNumberish, from EthersJS library\n *\n * @param value - the value to check\n *\n * @returns boolean\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isBigNumberish(value: "
            },
            {
              "kind": "Content",
              "text": "any"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/types/utils.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "value",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "isBigNumberish"
        },
        {
          "kind": "Variable",
          "canonicalReference": "@rainprotocol/rainlang!isBytes:var",
          "docComment": "/**\n * ethers isBytes\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "isBytes: "
            },
            {
              "kind": "Content",
              "text": "typeof "
            },
            {
              "kind": "Reference",
              "text": "utils.isBytes",
              "canonicalReference": "@ethersproject/bytes!isBytes:function"
            }
          ],
          "fileUrlPath": "dist/types/utils.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "isBytes",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@rainprotocol/rainlang!isBytesLike:var",
          "docComment": "/**\n * ethers isBytesLike\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "isBytesLike: "
            },
            {
              "kind": "Content",
              "text": "typeof "
            },
            {
              "kind": "Reference",
              "text": "utils.isBytesLike",
              "canonicalReference": "@ethersproject/bytes!isBytesLike:function"
            }
          ],
          "fileUrlPath": "dist/types/utils.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "isBytesLike",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "@rainprotocol/rainlang!isEmptyRange:function(1)",
          "docComment": "/**\n * Checks if a range is empty\n *\n * @param range - The range to check\n *\n * @returns True if the range is empty and false if not\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isEmptyRange(range: "
            },
            {
              "kind": "Reference",
              "text": "Range",
              "canonicalReference": "@rainprotocol/rainlang!~Range"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/types/utils.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "range",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "isEmptyRange"
        },
        {
          "kind": "Variable",
          "canonicalReference": "@rainprotocol/rainlang!isHexString:var",
          "docComment": "/**\n * ethers isHexString\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "isHexString: "
            },
            {
              "kind": "Content",
              "text": "typeof "
            },
            {
              "kind": "Reference",
              "text": "utils.isHexString",
              "canonicalReference": "@ethersproject/bytes!isHexString:function"
            }
          ],
          "fileUrlPath": "dist/types/utils.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "isHexString",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "@rainprotocol/rainlang!isInRange:function(1)",
          "docComment": "/**\n * Checks if a position is within a range\n *\n * @param range - The range to check\n *\n * @param position - The position to check\n *\n * @returns True if the position is in range and false if not\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isInRange(range: "
            },
            {
              "kind": "Reference",
              "text": "Range",
              "canonicalReference": "@rainprotocol/rainlang!~Range"
            },
            {
              "kind": "Content",
              "text": ", position: "
            },
            {
              "kind": "Reference",
              "text": "Position",
              "canonicalReference": "@rainprotocol/rainlang!~Position"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/types/utils.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "range",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "position",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "name": "isInRange"
        },
        {
          "kind": "Interface",
          "canonicalReference": "@rainprotocol/rainlang!LanguageServiceParams:interface",
          "docComment": "/**\n * Parameters for initiating Language Services\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface LanguageServiceParams "
            }
          ],
          "fileUrlPath": "dist/types/rainLanguageTypes.d.ts",
          "releaseTag": "Public",
          "name": "LanguageServiceParams",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@rainprotocol/rainlang!LanguageServiceParams#clientCapabilities:member",
              "docComment": "/**\n * Describes the LSP capabilities the client supports.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "clientCapabilities?: "
                },
                {
                  "kind": "Reference",
                  "text": "ClientCapabilities",
                  "canonicalReference": "@rainprotocol/rainlang!ClientCapabilities:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "clientCapabilities",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@rainprotocol/rainlang!LanguageServiceParams#metaStore:member",
              "docComment": "/**\n * Object that keeps cache of metas\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "metaStore?: "
                },
                {
                  "kind": "Reference",
                  "text": "MetaStore",
                  "canonicalReference": "@rainprotocol/rainlang!MetaStore:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "metaStore",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Function",
          "canonicalReference": "@rainprotocol/rainlang!mapToRecord:function(1)",
          "docComment": "/**\n * Conver a Map to a equivelant Record (a key/value pair object). Map keys must be of type acceptable by Record constructor, which are string, number or symbol.\n *\n * @param map - The Map to conver to Record\n *\n * @param properties - (optional) properties to pick from the second item of the Map's elements.\n *\n * @returns a new Record from Map\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function mapToRecord<K extends "
            },
            {
              "kind": "Content",
              "text": "string | number | symbol"
            },
            {
              "kind": "Content",
              "text": ">(map: "
            },
            {
              "kind": "Reference",
              "text": "Map",
              "canonicalReference": "!Map:interface"
            },
            {
              "kind": "Content",
              "text": "<K, any>"
            },
            {
              "kind": "Content",
              "text": ", properties?: "
            },
            {
              "kind": "Content",
              "text": "string[]"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Record",
              "canonicalReference": "!Record:type"
            },
            {
              "kind": "Content",
              "text": "<K, any>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/types/utils.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 8,
            "endIndex": 10
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "map",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "isOptional": false
            },
            {
              "parameterName": "properties",
              "parameterTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              },
              "isOptional": true
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "K",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "mapToRecord"
        },
        {
          "kind": "Function",
          "canonicalReference": "@rainprotocol/rainlang!matchRange:function(1)",
          "docComment": "/**\n * Checks if 2 ranges match exactly together\n *\n * @param range1 - The first range\n *\n * @param range2 - The second range\n *\n * @returns True if the ranges match and false if they don't\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function matchRange(range1: "
            },
            {
              "kind": "Reference",
              "text": "Range",
              "canonicalReference": "@rainprotocol/rainlang!~Range"
            },
            {
              "kind": "Content",
              "text": ", range2: "
            },
            {
              "kind": "Reference",
              "text": "Range",
              "canonicalReference": "@rainprotocol/rainlang!~Range"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/types/utils.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "range1",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "range2",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "name": "matchRange"
        },
        {
          "kind": "Function",
          "canonicalReference": "@rainprotocol/rainlang!memoryOperand:function(1)",
          "docComment": "/**\n * Constructs operand for standard STATE opecode\n *\n * @param type - Type of the opcode, either 'stack' or 'constant'\n *\n * @param offset - the position of the item in respect to its type\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function memoryOperand(offset: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ", type: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/types/utils.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "offset",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "type",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "name": "memoryOperand"
        },
        {
          "kind": "Enum",
          "canonicalReference": "@rainprotocol/rainlang!MemoryType:enum",
          "docComment": "/**\n * Type for read-memory opcode\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare enum MemoryType "
            }
          ],
          "fileUrlPath": "dist/types/rainLanguageTypes.d.ts",
          "releaseTag": "Public",
          "name": "MemoryType",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "EnumMember",
              "canonicalReference": "@rainprotocol/rainlang!MemoryType.Constant:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Constant = "
                },
                {
                  "kind": "Content",
                  "text": "1"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "Constant"
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@rainprotocol/rainlang!MemoryType.Stack:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Stack = "
                },
                {
                  "kind": "Content",
                  "text": "0"
                }
              ],
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "name": "Stack"
            }
          ]
        },
        {
          "kind": "Class",
          "canonicalReference": "@rainprotocol/rainlang!MetaStore:class",
          "docComment": "/**\n * Reads, stores and simply manages k/v pairs of meta hash and meta bytes and provides the functionalities to easliy utilize them. Hashes must 32 bytes (in hex string format) and will be stored as lower case. Meta bytes must be valid cbor encoded that emitted by the contract.\n *\n * Subgraph endpoint URLs specified in \"sgBook\" from [rainlang-meta](https://github.com/rainprotocol/meta/blob/master/src/subgraphBook.ts) are included by default as subgraph endpoint URLs to search for metas.\n *\n * Subgraphs URLs can also be provided, either at instantiation or when using `addSubgraph()`, which must be valid starting with `https\"//api.thegraph.com/subgraphs/name/`, else they will be ignored.\n *\n * Given a k/v pair of meta hash and meta bytes either at instantiation or when using `updateStore()`, it regenrates the hash from the meta to check the validity of the k/v pair and if the check fails it tries to read the meta from subgraphs and store the result if it finds any.\n *\n * @example\n * ```typescript\n * // to instantiate\n * const metaStore = new MetaStore();\n *\n * // or to instantiate with initial arguments\n * const metaStore = await MetaStore.create(sgEndpoints, initCache);\n *\n * // add a new subgraph endpoint url to the subgraph list\n * metaStore.addSubgraph(\"https://api.thegraph.com...\")\n *\n * // update the store with a new MetaStore object (merges the stores)\n * await metaStore.updateStore(newMetaStore)\n *\n * // updates the meta store with a new meta\n * await metaStore.updateStore(metaHash, metaBytes)\n *\n * // updates the meta store with a new meta by searching through subgraphs\n * await metaStore.updateStore(metaHash)\n *\n * // to get an op meta from store\n * const opMeta = metaStore.getOpMeta(metaHash);\n *\n * // to get a contract meta from store\n * const contractMeta = metaStore.getContractMeta(metaHash);\n * ```\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class MetaStore "
            }
          ],
          "fileUrlPath": "dist/types/parser/metaStore.d.ts",
          "releaseTag": "Public",
          "isAbstract": false,
          "name": "MetaStore",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@rainprotocol/rainlang!MetaStore:constructor(1)",
              "docComment": "/**\n * Constructor of the class Use `MetaStore.create` to instantiate with initial options.\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor();"
                }
              ],
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": []
            },
            {
              "kind": "Method",
              "canonicalReference": "@rainprotocol/rainlang!MetaStore#addSubgraph:member(1)",
              "docComment": "/**\n * Adds a new subgraph endpoint URL to the subgraph list\n *\n * @param subgraphUrl - The subgraph endpoint URL\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "addSubgraph(subgraphUrl: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "subgraphUrl",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "addSubgraph"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rainprotocol/rainlang!MetaStore.create:member(1)",
              "docComment": "/**\n * Creates a fresh instance of MetaStore object\n *\n * @param options - (optional) Options for instantiation\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static create(options?: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        subgraphs?: string[];\n        initMetas?: {\n            [hash: string]: string;\n        };\n    }"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "MetaStore",
                  "canonicalReference": "@rainprotocol/rainlang!MetaStore:class"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "create"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rainprotocol/rainlang!MetaStore#getContractMeta:member(1)",
              "docComment": "/**\n * Get contract meta for a given meta hash\n *\n * @param metaHash - The meta hash\n *\n * @returns The contract meta bytes as hex string if it exists in the store and `undefined` if it doesn't\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getContractMeta(metaHash: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "string | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "metaHash",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "getContractMeta"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rainprotocol/rainlang!MetaStore#getContractMetaStore:member(1)",
              "docComment": "/**\n * Get the whole contract meta k/v store\n *\n * @returns The contract meta store\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getContractMetaStore(): "
                },
                {
                  "kind": "Content",
                  "text": "{\n        [hash: string]: string | undefined;\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "isAbstract": false,
              "name": "getContractMetaStore"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rainprotocol/rainlang!MetaStore#getOpMeta:member(1)",
              "docComment": "/**\n * Get op meta for a given meta hash\n *\n * @param metaHash - The meta hash\n *\n * @returns The op meta bytes as hex string if it exists in the store and `undefined` if it doesn't\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getOpMeta(metaHash: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "string | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "metaHash",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "getOpMeta"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rainprotocol/rainlang!MetaStore#getOpMetaStore:member(1)",
              "docComment": "/**\n * Get the whole op meta k/v store\n *\n * @returns The op meta store\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getOpMetaStore(): "
                },
                {
                  "kind": "Content",
                  "text": "{\n        [hash: string]: string | undefined;\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "isAbstract": false,
              "name": "getOpMetaStore"
            },
            {
              "kind": "Property",
              "canonicalReference": "@rainprotocol/rainlang!MetaStore#subgraphs:member",
              "docComment": "/**\n * Subgraph endpoint URLs of this store instance\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly subgraphs: "
                },
                {
                  "kind": "Content",
                  "text": "string[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "subgraphs",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@rainprotocol/rainlang!MetaStore#updateStore:member(1)",
              "docComment": "/**\n * Updates the whole store with the given MetaStore instance\n *\n * @param metaStore - A MetaStore object instance\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "updateStore(metaStore: "
                },
                {
                  "kind": "Reference",
                  "text": "MetaStore",
                  "canonicalReference": "@rainprotocol/rainlang!MetaStore:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "metaStore",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "updateStore"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rainprotocol/rainlang!MetaStore#updateStore:member(2)",
              "docComment": "/**\n * Updates the meta store for the given meta hash and meta bytes\n *\n * @param metaHash - The meta hash (32 bytes hex string)\n *\n * @param metaBytes - The meta bytes that are cbor encoded emitted by the deployed contract\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "updateStore(metaHash: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", metaBytes: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 2,
              "parameters": [
                {
                  "parameterName": "metaHash",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "metaBytes",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "updateStore"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rainprotocol/rainlang!MetaStore#updateStore:member(3)",
              "docComment": "/**\n * Updates the meta store for the given meta hash by reading from subgraphs\n *\n * @param metaHash - The meta hash (32 bytes hex string)\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "updateStore(metaHash: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 3,
              "parameters": [
                {
                  "parameterName": "metaHash",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "updateStore"
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "Variable",
          "canonicalReference": "@rainprotocol/rainlang!op:var",
          "docComment": "/**\n * Converts an opcode and operand to bytes, and returns their concatenation.\n *\n * @param code - the opcode\n *\n * @param erand - the operand, currently limited to 1 byte (defaults to 0)\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "op: "
            },
            {
              "kind": "Content",
              "text": "(code: number, erand?: number | "
            },
            {
              "kind": "Reference",
              "text": "BytesLike",
              "canonicalReference": "@ethersproject/bytes!BytesLike:type"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "utils.Hexable",
              "canonicalReference": "@ethersproject/bytes!Hexable:interface"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Reference",
              "text": "Uint8Array",
              "canonicalReference": "!Uint8Array:interface"
            }
          ],
          "fileUrlPath": "dist/types/utils.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "op",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 7
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@rainprotocol/rainlang!paddedUInt128:var",
          "docComment": "/**\n * Utility function to produce 128 bits size hexString\n *\n * @param value - the value to convert into a 128bit size hexString\n *\n * @returns a 32 character hexString (without 0x prefix)\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "paddedUInt128: "
            },
            {
              "kind": "Content",
              "text": "(value: "
            },
            {
              "kind": "Reference",
              "text": "BigNumberish",
              "canonicalReference": "@ethersproject/bignumber!BigNumberish:type"
            },
            {
              "kind": "Content",
              "text": ") => string"
            }
          ],
          "fileUrlPath": "dist/types/utils.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "paddedUInt128",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@rainprotocol/rainlang!paddedUInt160:var",
          "docComment": "/**\n * Utility function that transforms a BigNumberish to an ether address (40 char length hexString)\n *\n * @param address - value as bignumberish\n *\n * @returns hexadecimal string as an ether address (40 char length hexString)\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "paddedUInt160: "
            },
            {
              "kind": "Content",
              "text": "(address: "
            },
            {
              "kind": "Reference",
              "text": "BigNumberish",
              "canonicalReference": "@ethersproject/bignumber!BigNumberish:type"
            },
            {
              "kind": "Content",
              "text": ") => string"
            }
          ],
          "fileUrlPath": "dist/types/utils.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "paddedUInt160",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@rainprotocol/rainlang!paddedUInt256:var",
          "docComment": "/**\n * Utility function that transforms a BigNumberish from the output of the ITierV2 contract report\n *\n * @param report - report as bignumberish from the ITierV2 contract\n *\n * @returns hexadecimal string of the report already padded (64 char hexString)\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "paddedUInt256: "
            },
            {
              "kind": "Content",
              "text": "(report: "
            },
            {
              "kind": "Reference",
              "text": "BigNumberish",
              "canonicalReference": "@ethersproject/bignumber!BigNumberish:type"
            },
            {
              "kind": "Content",
              "text": ") => string"
            }
          ],
          "fileUrlPath": "dist/types/utils.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "paddedUInt256",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@rainprotocol/rainlang!paddedUInt32:var",
          "docComment": "/**\n * Utility function to produce 32 bits size hexString\n *\n * @param value - the value to convert into a 32bit size hexString\n *\n * @returns a 8 char hexString (without 0x prefix)\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "paddedUInt32: "
            },
            {
              "kind": "Content",
              "text": "(value: "
            },
            {
              "kind": "Reference",
              "text": "BigNumberish",
              "canonicalReference": "@ethersproject/bignumber!BigNumberish:type"
            },
            {
              "kind": "Content",
              "text": ") => string"
            }
          ],
          "fileUrlPath": "dist/types/utils.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "paddedUInt32",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@rainprotocol/rainlang!paddedUInt64:var",
          "docComment": "/**\n * Utility function to produce 64 bits size hexString\n *\n * @param value - the value to convert into a 64bit size hexString\n *\n * @returns a 16 character hexString (without 0x prefix)\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "paddedUInt64: "
            },
            {
              "kind": "Content",
              "text": "(value: "
            },
            {
              "kind": "Reference",
              "text": "BigNumberish",
              "canonicalReference": "@ethersproject/bignumber!BigNumberish:type"
            },
            {
              "kind": "Content",
              "text": ") => string"
            }
          ],
          "fileUrlPath": "dist/types/utils.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "paddedUInt64",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@rainprotocol/rainlang!parseUnits:var",
          "docComment": "/**\n * ethers parseUnits\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "parseUnits: "
            },
            {
              "kind": "Content",
              "text": "typeof "
            },
            {
              "kind": "Reference",
              "text": "utils.parseUnits",
              "canonicalReference": "@ethersproject/units!parseUnits:function"
            }
          ],
          "fileUrlPath": "dist/types/utils.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "parseUnits",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          }
        },
        {
          "kind": "Class",
          "canonicalReference": "@rainprotocol/rainlang!RainDocument:class",
          "docComment": "/**\n * RainDocument is a class object that provides data and functionalities in order to be used later on to provide Rain Language Services or in Rain Language Compiler (rlc) to get the ExpressionConfig (deployable bytes). It uses Rain parser under the hood which does all the heavy work.\n *\n * @example\n * ```typescript\n * // to import\n * import { Raindocument } from 'rainlang';\n *\n * // to create a new instance of the RainDocument object which parses right after instantiation\n * const myRainDocument = await RainDocument.create(text)\n *\n * // to get the parse tree after instantiation\n * const parseTree = myRainDocument.getParseTree()\n *\n * // to update the text\n * await myRainDocument.update(newText)\n * ```\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class RainDocument "
            }
          ],
          "fileUrlPath": "dist/types/parser/rainDocument.d.ts",
          "releaseTag": "Public",
          "isAbstract": false,
          "name": "RainDocument",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Method",
              "canonicalReference": "@rainprotocol/rainlang!RainDocument.create:member(1)",
              "docComment": "/**\n * Creates a new instance of RainDocument\n *\n * @param textDocument - The text document\n *\n * @param metaStore - The MetaStore object\n *\n * @returns A new instance of RainDocument\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static create(textDocument: "
                },
                {
                  "kind": "Reference",
                  "text": "TextDocument",
                  "canonicalReference": "@rainprotocol/rainlang!~TextDocument"
                },
                {
                  "kind": "Content",
                  "text": ", metaStore?: "
                },
                {
                  "kind": "Reference",
                  "text": "MetaStore",
                  "canonicalReference": "@rainprotocol/rainlang!MetaStore:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "RainDocument",
                  "canonicalReference": "@rainprotocol/rainlang!RainDocument:class"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "textDocument",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "metaStore",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "create"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rainprotocol/rainlang!RainDocument#getComments:member(1)",
              "docComment": "/**\n * Get the current comments inside of the text of this RainDocument instance\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getComments(): "
                },
                {
                  "kind": "Reference",
                  "text": "RDComment",
                  "canonicalReference": "@rainprotocol/rainlang!RDComment:type"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "isAbstract": false,
              "name": "getComments"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rainprotocol/rainlang!RainDocument#getContextAliases:member(1)",
              "docComment": "/**\n * Get the context aliases of specified meta hashes in this RainDocument instance\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getContextAliases(): "
                },
                {
                  "kind": "Reference",
                  "text": "ContextAlias",
                  "canonicalReference": "@rainprotocol/rainlang!ContextAlias:type"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "isAbstract": false,
              "name": "getContextAliases"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rainprotocol/rainlang!RainDocument#getExpressionConfig:member(1)",
              "docComment": "/**\n * Get the ExpressionConfig (i.e. deployable bytes) of this RainDocument instance. This method should not be used directly, insteda the RainCompiler (rlc) should be used.\n *\n * @param item - Optional item to get the ExpressionConfig for\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getExpressionConfig(item?: "
                },
                {
                  "kind": "Reference",
                  "text": "RDNode",
                  "canonicalReference": "@rainprotocol/rainlang!RDNode:type"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "RDNode",
                  "canonicalReference": "@rainprotocol/rainlang!RDNode:type"
                },
                {
                  "kind": "Content",
                  "text": "[][] | "
                },
                {
                  "kind": "Reference",
                  "text": "RDParseTree",
                  "canonicalReference": "@rainprotocol/rainlang!RDParseTree:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "ExpressionConfig",
                  "canonicalReference": "@rainprotocol/rainlang!ExpressionConfig:type"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "item",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 6
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "getExpressionConfig"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rainprotocol/rainlang!RainDocument#getLHSAliases:member(1)",
              "docComment": "/**\n * Get the parsed exp aliases of this RainDocument instance\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getLHSAliases(): "
                },
                {
                  "kind": "Reference",
                  "text": "RDAliasNode",
                  "canonicalReference": "@rainprotocol/rainlang!RDAliasNode:type"
                },
                {
                  "kind": "Content",
                  "text": "[][]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "isAbstract": false,
              "name": "getLHSAliases"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rainprotocol/rainlang!RainDocument#getMetaHashes:member(1)",
              "docComment": "/**\n * Get the specified meta hashes of this RainDocument instance\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getMetaHashes(): "
                },
                {
                  "kind": "Reference",
                  "text": "RDMetaHash",
                  "canonicalReference": "@rainprotocol/rainlang!RDMetaHash:type"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "isAbstract": false,
              "name": "getMetaHashes"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rainprotocol/rainlang!RainDocument#getMetaStore:member(1)",
              "docComment": "/**\n * Get the MetaStore object instance of this RainDocument instance\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getMetaStore(): "
                },
                {
                  "kind": "Reference",
                  "text": "MetaStore",
                  "canonicalReference": "@rainprotocol/rainlang!MetaStore:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "isAbstract": false,
              "name": "getMetaStore"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rainprotocol/rainlang!RainDocument#getOpMeta:member(1)",
              "docComment": "/**\n * Get the current op meta of this RainDocument instance\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getOpMeta(): "
                },
                {
                  "kind": "Reference",
                  "text": "OpMeta",
                  "canonicalReference": "@rainprotocol/meta!OpMeta:type"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "isAbstract": false,
              "name": "getOpMeta"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rainprotocol/rainlang!RainDocument#getOpMetaBytes:member(1)",
              "docComment": "/**\n * Get the current raw op meta of this RainDocument instance in hex string\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getOpMetaBytes(): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "isAbstract": false,
              "name": "getOpMetaBytes"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rainprotocol/rainlang!RainDocument#getParseTree:member(1)",
              "docComment": "/**\n * Get the current parse tree of this RainDocument instance\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getParseTree(): "
                },
                {
                  "kind": "Reference",
                  "text": "RDParseTree",
                  "canonicalReference": "@rainprotocol/rainlang!RDParseTree:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "isAbstract": false,
              "name": "getParseTree"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rainprotocol/rainlang!RainDocument#getProblems:member(1)",
              "docComment": "/**\n * Get the current problems of this RainDocument instance\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getProblems(): "
                },
                {
                  "kind": "Reference",
                  "text": "RDProblem",
                  "canonicalReference": "@rainprotocol/rainlang!RDProblem:type"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "isAbstract": false,
              "name": "getProblems"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rainprotocol/rainlang!RainDocument#getRuntimeError:member(1)",
              "docComment": "/**\n * Get the current runtime error of this RainDocument instance\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getRuntimeError(): "
                },
                {
                  "kind": "Reference",
                  "text": "Error",
                  "canonicalReference": "!Error:interface"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "isAbstract": false,
              "name": "getRuntimeError"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rainprotocol/rainlang!RainDocument#getTextDocument:member(1)",
              "docComment": "/**\n * Get the current text of this RainDocument instance\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getTextDocument(): "
                },
                {
                  "kind": "Reference",
                  "text": "TextDocument",
                  "canonicalReference": "@rainprotocol/rainlang!~TextDocument"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "isAbstract": false,
              "name": "getTextDocument"
            },
            {
              "kind": "Method",
              "canonicalReference": "@rainprotocol/rainlang!RainDocument#update:member(1)",
              "docComment": "/**\n * Method to update the RainDocument with new text or opmeta and get the parse results\n *\n * @param newTextDocument - Raw text to parse\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "update(newTextDocument?: "
                },
                {
                  "kind": "Reference",
                  "text": "TextDocument",
                  "canonicalReference": "@rainprotocol/rainlang!~TextDocument"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "newTextDocument",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "update"
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "Function",
          "canonicalReference": "@rainprotocol/rainlang!rainlang:function(1)",
          "docComment": "/**\n * Method to be used as Tagged Templates to activate embedded rainlang in javascript to typescript that highlights the rainlang syntax. Requires rainlang vscode extension to be installed.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function rainlang(stringChunks: "
            },
            {
              "kind": "Reference",
              "text": "TemplateStringsArray",
              "canonicalReference": "!TemplateStringsArray:interface"
            },
            {
              "kind": "Content",
              "text": ", ...vars: "
            },
            {
              "kind": "Content",
              "text": "any[]"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/types/utils.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "stringChunks",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "vars",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "name": "rainlang"
        },
        {
          "kind": "Interface",
          "canonicalReference": "@rainprotocol/rainlang!RainLanguageServices:interface",
          "docComment": "/**\n * Interface for Rain language services\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface RainLanguageServices "
            }
          ],
          "fileUrlPath": "dist/types/rainLanguageService.d.ts",
          "releaseTag": "Public",
          "name": "RainLanguageServices",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "MethodSignature",
              "canonicalReference": "@rainprotocol/rainlang!RainLanguageServices#doComplete:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "doComplete(textDocument: "
                },
                {
                  "kind": "Reference",
                  "text": "TextDocument",
                  "canonicalReference": "@rainprotocol/rainlang!~TextDocument"
                },
                {
                  "kind": "Content",
                  "text": ", position: "
                },
                {
                  "kind": "Reference",
                  "text": "Position",
                  "canonicalReference": "@rainprotocol/rainlang!~Position"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "CompletionItem",
                  "canonicalReference": "@rainprotocol/rainlang!~CompletionItem"
                },
                {
                  "kind": "Content",
                  "text": "[] | null>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "textDocument",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "position",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "name": "doComplete"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@rainprotocol/rainlang!RainLanguageServices#doHover:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "doHover(textDocument: "
                },
                {
                  "kind": "Reference",
                  "text": "TextDocument",
                  "canonicalReference": "@rainprotocol/rainlang!~TextDocument"
                },
                {
                  "kind": "Content",
                  "text": ", position: "
                },
                {
                  "kind": "Reference",
                  "text": "Position",
                  "canonicalReference": "@rainprotocol/rainlang!~Position"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Hover",
                  "canonicalReference": "@rainprotocol/rainlang!~Hover"
                },
                {
                  "kind": "Content",
                  "text": " | null>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "textDocument",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "position",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "name": "doHover"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@rainprotocol/rainlang!RainLanguageServices#doValidation:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "doValidation(textDocument: "
                },
                {
                  "kind": "Reference",
                  "text": "TextDocument",
                  "canonicalReference": "@rainprotocol/rainlang!~TextDocument"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Diagnostic",
                  "canonicalReference": "@rainprotocol/rainlang!~Diagnostic"
                },
                {
                  "kind": "Content",
                  "text": "[]>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "textDocument",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "doValidation"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@rainprotocol/rainlang!RainLanguageServices#newRainDocument:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "newRainDocument(textDocument: "
                },
                {
                  "kind": "Reference",
                  "text": "TextDocument",
                  "canonicalReference": "@rainprotocol/rainlang!~TextDocument"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "RainDocument",
                  "canonicalReference": "@rainprotocol/rainlang!RainDocument:class"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "textDocument",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "newRainDocument"
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@rainprotocol/rainlang!RainParseState:type",
          "docComment": "/**\n * Type of RainParser state\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type RainParseState = "
            },
            {
              "kind": "Content",
              "text": "{\n    parse: {\n        tree: "
            },
            {
              "kind": "Reference",
              "text": "RDNode",
              "canonicalReference": "@rainprotocol/rainlang!RDNode:type"
            },
            {
              "kind": "Content",
              "text": "[];\n        aliases: "
            },
            {
              "kind": "Reference",
              "text": "RDAliasNode",
              "canonicalReference": "@rainprotocol/rainlang!RDAliasNode:type"
            },
            {
              "kind": "Content",
              "text": "[];\n    };\n    track: {\n        char: number;\n        parens: {\n            open: number[];\n            close: number[];\n        };\n    };\n    depthLevel: number;\n    runtimeError: "
            },
            {
              "kind": "Reference",
              "text": "Error",
              "canonicalReference": "!Error:interface"
            },
            {
              "kind": "Content",
              "text": " | undefined;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/types/rainLanguageTypes.d.ts",
          "releaseTag": "Public",
          "name": "RainParseState",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 8
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@rainprotocol/rainlang!RDAliasNode:type",
          "docComment": "/**\n * Type of RainDocument's lhs aliases\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type RDAliasNode = "
            },
            {
              "kind": "Content",
              "text": "{\n    name: string;\n    position: "
            },
            {
              "kind": "Reference",
              "text": "RDPosition",
              "canonicalReference": "@rainprotocol/rainlang!RDPosition:type"
            },
            {
              "kind": "Content",
              "text": ";\n    lhs?: "
            },
            {
              "kind": "Reference",
              "text": "RDAliasNode",
              "canonicalReference": "@rainprotocol/rainlang!RDAliasNode:type"
            },
            {
              "kind": "Content",
              "text": ";\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/types/rainLanguageTypes.d.ts",
          "releaseTag": "Public",
          "name": "RDAliasNode",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 6
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@rainprotocol/rainlang!RDComment:type",
          "docComment": "/**\n * Type of RainDocument's comments\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type RDComment = "
            },
            {
              "kind": "Content",
              "text": "{\n    comment: string;\n    position: "
            },
            {
              "kind": "Reference",
              "text": "RDPosition",
              "canonicalReference": "@rainprotocol/rainlang!RDPosition:type"
            },
            {
              "kind": "Content",
              "text": ";\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/types/rainLanguageTypes.d.ts",
          "releaseTag": "Public",
          "name": "RDComment",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@rainprotocol/rainlang!RDMetaHash:type",
          "docComment": "/**\n * Type of meta hash specified in a RainDocument\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type RDMetaHash = "
            },
            {
              "kind": "Content",
              "text": "{\n    hash: string;\n    position: "
            },
            {
              "kind": "Reference",
              "text": "RDPosition",
              "canonicalReference": "@rainprotocol/rainlang!RDPosition:type"
            },
            {
              "kind": "Content",
              "text": ";\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/types/rainLanguageTypes.d.ts",
          "releaseTag": "Public",
          "name": "RDMetaHash",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@rainprotocol/rainlang!RDNode:type",
          "docComment": "/**\n * Type of RainDocument's parse node\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type RDNode = "
            },
            {
              "kind": "Reference",
              "text": "RDValueNode",
              "canonicalReference": "@rainprotocol/rainlang!RDValueNode:type"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "RDOpNode",
              "canonicalReference": "@rainprotocol/rainlang!RDOpNode:type"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "RDAliasNode",
              "canonicalReference": "@rainprotocol/rainlang!RDAliasNode:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/types/rainLanguageTypes.d.ts",
          "releaseTag": "Public",
          "name": "RDNode",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 6
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@rainprotocol/rainlang!RDOpNode:type",
          "docComment": "/**\n * Type of RainDocument's Opcode node\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type RDOpNode = "
            },
            {
              "kind": "Content",
              "text": "{\n    opcode: {\n        name: string;\n        description: string;\n        position: "
            },
            {
              "kind": "Reference",
              "text": "RDPosition",
              "canonicalReference": "@rainprotocol/rainlang!RDPosition:type"
            },
            {
              "kind": "Content",
              "text": ";\n    };\n    operand: number;\n    output: number;\n    position: "
            },
            {
              "kind": "Reference",
              "text": "RDPosition",
              "canonicalReference": "@rainprotocol/rainlang!RDPosition:type"
            },
            {
              "kind": "Content",
              "text": ";\n    parens: "
            },
            {
              "kind": "Reference",
              "text": "RDPosition",
              "canonicalReference": "@rainprotocol/rainlang!RDPosition:type"
            },
            {
              "kind": "Content",
              "text": ";\n    parameters: "
            },
            {
              "kind": "Reference",
              "text": "RDNode",
              "canonicalReference": "@rainprotocol/rainlang!RDNode:type"
            },
            {
              "kind": "Content",
              "text": "[];\n    operandArgs?: {\n        position: "
            },
            {
              "kind": "Reference",
              "text": "RDPosition",
              "canonicalReference": "@rainprotocol/rainlang!RDPosition:type"
            },
            {
              "kind": "Content",
              "text": ";\n        args: {\n            value: number;\n            name: string;\n            position: "
            },
            {
              "kind": "Reference",
              "text": "RDPosition",
              "canonicalReference": "@rainprotocol/rainlang!RDPosition:type"
            },
            {
              "kind": "Content",
              "text": ";\n            description?: string;\n        }[];\n    };\n    lhs?: "
            },
            {
              "kind": "Reference",
              "text": "RDAliasNode",
              "canonicalReference": "@rainprotocol/rainlang!RDAliasNode:type"
            },
            {
              "kind": "Content",
              "text": "[];\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/types/rainLanguageTypes.d.ts",
          "releaseTag": "Public",
          "name": "RDOpNode",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 16
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@rainprotocol/rainlang!RDParseTree:type",
          "docComment": "/**\n * Type of a RainDocument parse tree\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type RDParseTree = "
            },
            {
              "kind": "Content",
              "text": "{\n    tree: "
            },
            {
              "kind": "Reference",
              "text": "RDNode",
              "canonicalReference": "@rainprotocol/rainlang!RDNode:type"
            },
            {
              "kind": "Content",
              "text": "[];\n    position: "
            },
            {
              "kind": "Reference",
              "text": "RDPosition",
              "canonicalReference": "@rainprotocol/rainlang!RDPosition:type"
            },
            {
              "kind": "Content",
              "text": ";\n}[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/types/rainLanguageTypes.d.ts",
          "releaseTag": "Public",
          "name": "RDParseTree",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 6
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@rainprotocol/rainlang!RDPosition:type",
          "docComment": "/**\n * Type of position start and end indexes for RainDocument, inclusive at both ends\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type RDPosition = "
            },
            {
              "kind": "Content",
              "text": "[number, number]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/types/rainLanguageTypes.d.ts",
          "releaseTag": "Public",
          "name": "RDPosition",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@rainprotocol/rainlang!RDProblem:type",
          "docComment": "/**\n * Type of RainDocument's problem\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type RDProblem = "
            },
            {
              "kind": "Content",
              "text": "{\n    msg: string;\n    position: "
            },
            {
              "kind": "Reference",
              "text": "RDPosition",
              "canonicalReference": "@rainprotocol/rainlang!RDPosition:type"
            },
            {
              "kind": "Content",
              "text": ";\n    code: number;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/types/rainLanguageTypes.d.ts",
          "releaseTag": "Public",
          "name": "RDProblem",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@rainprotocol/rainlang!RDValueNode:type",
          "docComment": "/**\n * Type of RainDocument's Value node\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type RDValueNode = "
            },
            {
              "kind": "Content",
              "text": "{\n    value: "
            },
            {
              "kind": "Reference",
              "text": "BigNumberish",
              "canonicalReference": "@ethersproject/bignumber!BigNumberish:type"
            },
            {
              "kind": "Content",
              "text": ";\n    position: "
            },
            {
              "kind": "Reference",
              "text": "RDPosition",
              "canonicalReference": "@rainprotocol/rainlang!RDPosition:type"
            },
            {
              "kind": "Content",
              "text": ";\n    lhs?: "
            },
            {
              "kind": "Reference",
              "text": "RDAliasNode",
              "canonicalReference": "@rainprotocol/rainlang!RDAliasNode:type"
            },
            {
              "kind": "Content",
              "text": ";\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/types/rainLanguageTypes.d.ts",
          "releaseTag": "Public",
          "name": "RDValueNode",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 8
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "@rainprotocol/rainlang!recordToMap:function(1)",
          "docComment": "/**\n * Conver a Record (a key/value pair object) to a equivelant Map. Map keys will be of type acceptable by Record constructor, which are string, number or symbol.\n *\n * @param record - The Record to convert to a Map\n *\n * @param properties - (optional) properties to pick from the values of key/value pair items of the Record object.\n *\n * @returns Map Object from Record\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function recordToMap<K extends "
            },
            {
              "kind": "Content",
              "text": "string | number | symbol"
            },
            {
              "kind": "Content",
              "text": ">(record: "
            },
            {
              "kind": "Reference",
              "text": "Record",
              "canonicalReference": "!Record:type"
            },
            {
              "kind": "Content",
              "text": "<K, any>"
            },
            {
              "kind": "Content",
              "text": ", properties?: "
            },
            {
              "kind": "Content",
              "text": "string | string[]"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Map",
              "canonicalReference": "!Map:interface"
            },
            {
              "kind": "Content",
              "text": "<K, any>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/types/utils.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 8,
            "endIndex": 10
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "record",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "isOptional": false
            },
            {
              "parameterName": "properties",
              "parameterTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              },
              "isOptional": true
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "K",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "recordToMap"
        },
        {
          "kind": "Function",
          "canonicalReference": "@rainprotocol/rainlang!rlc:function(1)",
          "docComment": "/**\n * Rain Language Compiler (rlc), compiles a text into valid ExpressionConfig (deployable bytes)\n *\n * @param text - The raw string to compile\n *\n * @param metaStore - (optional) MetaStore object\n *\n * @returns A promise that resolves with ExpressionConfig and rejects with `undefined` if problems were found within the text\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function rlc(text: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", metaStore?: "
            },
            {
              "kind": "Reference",
              "text": "MetaStore",
              "canonicalReference": "@rainprotocol/rainlang!MetaStore:class"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ExpressionConfig",
              "canonicalReference": "@rainprotocol/rainlang!ExpressionConfig:type"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/types/compiler/rainCompiler.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 9
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "text",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "metaStore",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": true
            }
          ],
          "name": "rlc"
        },
        {
          "kind": "Function",
          "canonicalReference": "@rainprotocol/rainlang!rlc:function(2)",
          "docComment": "/**\n * Rain Language Compiler (rlc), compiles Text Documents into valid ExpressionConfig (deployable bytes)\n *\n * @param document - The TextDocument to compile\n *\n * @param metaStore - (optional) MetaStore object\n *\n * @returns A promise that resolves with ExpressionConfig and rejects with `undefined` if problems were found within the text\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function rlc(document: "
            },
            {
              "kind": "Reference",
              "text": "TextDocument",
              "canonicalReference": "@rainprotocol/rainlang!~TextDocument"
            },
            {
              "kind": "Content",
              "text": ", metaStore?: "
            },
            {
              "kind": "Reference",
              "text": "MetaStore",
              "canonicalReference": "@rainprotocol/rainlang!MetaStore:class"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ExpressionConfig",
              "canonicalReference": "@rainprotocol/rainlang!ExpressionConfig:type"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/types/compiler/rainCompiler.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 9
          },
          "releaseTag": "Public",
          "overloadIndex": 2,
          "parameters": [
            {
              "parameterName": "document",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "metaStore",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": true
            }
          ],
          "name": "rlc"
        },
        {
          "kind": "Function",
          "canonicalReference": "@rainprotocol/rainlang!rlc:function(3)",
          "docComment": "/**\n * Rain Language Compiler (rlc), compiles Rain Documents into valid ExpressionConfig (deployable bytes)\n *\n * @param rainDocument - The RainDocument to compile\n *\n * @param metaStore - (optional) MetaStore object to get merged with the RainDocument's MetaStore\n *\n * @returns A promise that resolves with ExpressionConfig and rejects with `undefined` if problems were found within the text\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function rlc(rainDocument: "
            },
            {
              "kind": "Reference",
              "text": "RainDocument",
              "canonicalReference": "@rainprotocol/rainlang!RainDocument:class"
            },
            {
              "kind": "Content",
              "text": ", metaStore?: "
            },
            {
              "kind": "Reference",
              "text": "MetaStore",
              "canonicalReference": "@rainprotocol/rainlang!MetaStore:class"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ExpressionConfig",
              "canonicalReference": "@rainprotocol/rainlang!ExpressionConfig:type"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/types/compiler/rainCompiler.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 9
          },
          "releaseTag": "Public",
          "overloadIndex": 3,
          "parameters": [
            {
              "parameterName": "rainDocument",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "metaStore",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": true
            }
          ],
          "name": "rlc"
        },
        {
          "kind": "Function",
          "canonicalReference": "@rainprotocol/rainlang!rld:function(1)",
          "docComment": "/**\n * Rain Language Decompiler (rld), decompiles ExpressionConfig (bytes) to a valid Rain document\n *\n * @param expressionConfig - ExpressionConfig to decompile\n *\n * @param metaHash - The meta hash\n *\n * @param metaStore - (optional) MetaStore object instance\n *\n * @param prettyFormat - (optional) Format the output document\n *\n * @returns A promise that resolves with a RainDocument\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function rld(expressionConfig: "
            },
            {
              "kind": "Reference",
              "text": "ExpressionConfig",
              "canonicalReference": "@rainprotocol/rainlang!ExpressionConfig:type"
            },
            {
              "kind": "Content",
              "text": ", metaHash: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", metaStore?: "
            },
            {
              "kind": "Reference",
              "text": "MetaStore",
              "canonicalReference": "@rainprotocol/rainlang!MetaStore:class"
            },
            {
              "kind": "Content",
              "text": ", prettyFormat?: "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "RainDocument",
              "canonicalReference": "@rainprotocol/rainlang!RainDocument:class"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "dist/types/compiler/rainDecompiler.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 9,
            "endIndex": 13
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "expressionConfig",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "metaHash",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            },
            {
              "parameterName": "metaStore",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "isOptional": true
            },
            {
              "parameterName": "prettyFormat",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "isOptional": true
            }
          ],
          "name": "rld"
        },
        {
          "kind": "Variable",
          "canonicalReference": "@rainprotocol/rainlang!zeroPad:var",
          "docComment": "/**\n * ethers zeroPad\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "zeroPad: "
            },
            {
              "kind": "Content",
              "text": "typeof "
            },
            {
              "kind": "Reference",
              "text": "utils.zeroPad",
              "canonicalReference": "@ethersproject/bytes!zeroPad:function"
            }
          ],
          "fileUrlPath": "dist/types/utils.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "zeroPad",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          }
        }
      ]
    }
  ]
}
